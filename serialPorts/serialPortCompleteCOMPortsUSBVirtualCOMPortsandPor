serialPortCompleteCOMPortsUSBVirtualCOMPortsandPortsForEmbeddedSystems_Using_NETsSerialPortClass

pg 176
Using .NET's Serial Port Class
	Programmers who use Microsoft’s .NET Framework can use the SerialPort class to access COM-port devices.

	Applications can use the class’s properties, methods, and events to access ports without having to resort to low-level programming or the Windows API.

	The code in this chapter uses resources in the following namespaces:
			VB 	Imports System
				Imports System.IO.Ports

			VC# using System.IO;
				using System.IO.Ports;

Gaining Access to a Port
	To access a COM port, an application creates a SerialPort object, sets the communication parameters, and opens a connection to the port.

Finding Ports
	The SerialPort class’s GetPortNames method returns an array of the names of all of the system’s COM ports.
			The array’s elements aren’t guaranteed to be in alphabetical order, but the Array.Sort method can sort if needed.

			VB 	Dim nameArray() As String
				nameArray = SerialPort.GetPortNames
				Array.Sort(nameArray)

			VC# string[] nameArray = null;
				nameArray = SerialPort.GetPortNames();
				Array.Sort( nameArray ); 

**********************************************************************
->	Because users can attach and remove virtual COM ports while an
	application is running, an application may need to look for ports more than once.
**********************************************************************
			Also be aware that the array index isn’t the same thing as a port’s COM-port number.

			For example, if a PC’s only port is COM4, the port’s SerialPort object will be at index zero in the array.

Opening a Port
	Before accessing a port or setting port parameters, the application must create a SerialPort object:
			VB	Friend myComPort as New SerialPort
			
			VC#	internal SerialPort myComPort = new SerialPort(); 

				// Practical uses for the “internal” keyword in C#
				// https://stackoverflow.com/questions/165719/practical-uses-for-the-internal-keyword-in-c-sharp
				// A common use of internal access is in component-based development because it enables a group of components to cooperate in a private manner without being exposed to the rest of the application code. For example, a framework for building graphical user interfaces could provide Control and Form classes that cooperate using members with internal access. Since these members are internal, they are not exposed to code that is using the framework.

	The SerialPort object has properties for setting port parameters. 
			The default parameters are 9600 bps, no parity, one Stop bit, and no flow control. 

			The object’s PortName property should match a name in the array returned by the GetPortNames method described above.

			An application that wants to use a specific port can search for a match in the array:
[From here on out I use C#]
			int index = -1;

			string[] nameArray = null;
			string myComPortName = null;

			// Specify the port to look for.
			myComPortName = "COM5";

			// Get an array of names of installed ports.
			nameArray = SerialPort.GetPortNames();

			do
			{
				// Look in the array for the desired port name.
				index += 1;
			}while ( 
					!(
						(nameArray[index] == myComPortName) | 
						( index == nameArray.GetUpperBound(0) )
					)
				);

			// If the desired port isn't found, select the first port in the array.
			if ( index == nameArray.GetUpperBound( 0 ) )
			{
				myComPort Name= nameArray[ 0 ];
			}

	To change a parameter, set the property’s value:
			myComPort.PortName = "COM6";
			myComPort.BaudRate = 115200;
			myComPort.Parity = Parity.Even;
			myComPort.DataBits = 7;
			myComPort.StopBits = StopBits.Two;
			myComPort.Handshake = RequestToSend;

	You can also set some of the parameters when initializing a SerialPort object:
			myComPort = new SerialPort("COM6", 115200, Parity.None, 8, StopBits.One);

	Before communicating with a port, the application must open a connection to the SerialPort object. 
			The Open method uses the specified parameters or default parameters if values haven’t been specified:
					myComPort.Open();

	Opening a port tests that the port is available and that the parameters are valid.

**********************************************************************
	After opening a port, the application has exclusive use of the port. No other application or resource can open the same port until the port is closed.
**********************************************************************
			An application can change port parameters such as bit rate and parity while the port is open.

			Attempting to open a port that is in use raises an 'UnauthorizedAccessException'.

			To prevent the exception, application code can read the port’s 'IsOpen' property to verify that the port is closed before attempting to open it:
					if (!( myComPort.IsOpen ))
					{
						myComPort.Open();
					}
			Of course it’s possible that another resource might open the port after reading 'IsOpen' but before calling the Open method.

			In that case, the application can catch the exception and display a message or take other action as needed:
					try
					{
						myComPort.Open();
					}
					catch ( UnauthorizedAccessException ex )
					{
						MessageBox.Show(ex.Message);
					}

	The examples that follow in this and following chapters assume the application has an open port called myComPort.

Timeouts pg181

Received Threashold
	A 'DataReceived' event can inform an application that data is available for reading in the receive buffer.

	The 'ReceivedBytesThreshold' property determines how many bytes must be present in the buffer before the event is raised.
			The default is one byte.
					If you set the property to a larger number, the 'DataReceived' event is likely to be raised less often and each event will likely have more data to process.

**********************************************************************
	Setting a threshold greater than 1 can prevent the receiving computer from seeing some or all of the received data.
**********************************************************************
			For example, assume that 'ReceivedBytesThreshold' in the receiving computer is set to 4 and the transmitting computer sends 3 bytes.

			The buffer holds fewer bytes than the threshold, so the 'DataReceived' event isn’t raised.
					Unless the transmitting computer sends another byte or the receiving computer polls the receive buffer, the application doesn’t know the bytes arrived.

Closing a Port pg 182
	Attempting to close a port that doesn’t exist causes a 'NullReferenceException'. 

	Attempting to close a port that isn’t open causes an 'InvalidOperationException'. 

	To avoid these exceptions, check to see that the port exists and is open before closing it.

**********************************************************************
	When a port is transmitting, closing the port or clearing the transmit buffer can crash Windows.
**********************************************************************
			To prevent crashes, wait for all data to transmit before closing the port. 

			To prevent an endless wait, set the port’s 'WriteTimeout' property. 

			On a timeout, the port’s 'BytesToWrite' property is set to zero, and the port can close without a crash.
					if (!(myComPort == null))
					{
						// The COM port exists.
						if ( myComPort.IsOpen )
						{
							// Wait for the transmit buffer to empty.
							while (myComPort.BytesToWrite > 0)
							{

							}
							
							// The COM port is open; close it and dispose of its resources.
							myComPort.Dispose();
						}
					}

			An alternate way to close a port is with a 'Using' block. 

			On exiting the 'Using' block, the SerialPort object named in the 'Using' statement is closed automatically and its resources are disposed of:
					using (SerialPort myComPort = new SerialPort())
					{
						myComPort.PortName = "COM6";
						myComPort.BaudRate = 115200;
						myComPort.Open();
						myComPort.WriteLine("hello");
					}

	Closing a port can take up to a few seconds (or longer if waiting for the port to finish transmitting), so applications and users should delay a bit between closing a port and re-opening the same port.

Transferring Data
	The .NET Framework supports many methods for reading and writing to COM ports.

	An application that sends a text command and waits for a response will likely use a different method than an application that is sending a large file of object code.

	The SerialPort class provides methods for reading and writing to ports.

	Applications can also use a SerialPort object’s BaseStream property to obtain 
			BinaryReader, 
			BinaryWriter, 
			StreamReader, and 
			StreamWriter 
	objects and use their methods to access a port.

	Table 9-1 and Table 9-2 summarize methods for reading and writing to SerialPort objects.

Object 	 	Method 	Data Type 	Blocking 
SerialPort 	Write 	Byte array 	Yes


	A basic data type for COM-port data is the byte array. An application can transfer any kind of data in byte arrays. 

	The COM-port software makes no assumptions about the meaning of the data or how the receiving computer will use the data.

	The receiving computer can decode the received data as needed.

	For applications that transfer text, numeric data other than bytes, and logical values, the SerialPort class includes methods that handle the encoding and  decoding of these data types.

	For example, an application that wants to send the text “CMD1” followed by a LF character could store the character codes in a byte array and write the array to a port:
			Byte[] dataToSend = new Byte[5];
			dataToSend[0] = (byte)'C';
			dataToSend[1] = (byte)'M';
			dataToSend[2] = (byte)'D';
			dataToSend[3] = (byte)'1';
			dataToSend[4] = 10;

			myComPort.Write(dataToSend, 0, 5);

	But the WriteLine method offers an easier way. The method converts each character in the String to a code and writes the codes, followed by a LF character, to the port:
			String dataToSend;
			dataToSend = "CMD1";
			myComPort.WriteLine(dataToSend);

	The SerialPort class provides methods for reading and writing individual
			Bytes or Chars; 
			arrays or portions of arrays of Bytes or Chars; 
			Strings; 
			Strings + NewLine characters; 
			formatted Strings; 
			Boolean values, numeric types such as Decimal, Int16, and
				others; and 
			text representations of numeric values.

	When reading data, most methods block (don’t return) until at least one byte or Char is available or a timeout occurs.
			The 'ReadExisting' method is an exception that returns immediately whether data is available or not.

			The BytesToRead property provides a way to find out if data is available before attempting a read operation.

**********************************************************************
	Attempting to read or write to a port that isn’t open raises an 'InvalidOperationException'.
**********************************************************************
			To prevent the exception, code can check to ensure the port is open and open the port if needed before reading or writing to the port.
					String portData;
					if (!(ComPort.selectedPort == null))
					{
						if (!myComPort.IsOpen)
						{
							myComPort.Open();
						}
					}
					if (ComPort.selectedPort.IsOpen )
					{
						portData = myComPort.ReadLine();
						myComPort.WriteLine(portData ) ;
					}

Transferring Bytes
	Many applications send and receive data stored in byte arrays and read data into byte arrays or byte variables.
Writing Bytes pg 189
Reading Bytes
	The SerialPort class provides two methods for reading bytes. The Read method can copy a specified number of received bytes from the receive buffer into a byte array beginning at a specified offset.

	This example reads up to three received bytes, stores the bytes beginning at offset 1 in the byteBuffer array, and displays the result:
			byte[] byteBuffer = new byte[4] {0, 0, 0, 0};
			Int32 count;
			Int32 numberOfReceivedBytes;
			myComPort.Read(byteBuffer, 1, 3);
			for (count = 0; count <= 3; count++)
			{
				Console.WriteLine(byteBuffer[count].ToString() );
			}

	If the remote port sends bytes with values 10, 20, and 30, the output is this:
			0
			10
			20
			30

	The Read method doesn’t wait for the specified number of bytes to arrive. The method returns if there is at least one received byte in the buffer.

	For example, if the remote port has sent a single byte with a value of 10, the Read method in the example above returns on receiving the byte and the output is this:
			0
			10
			0
			0

	Reading a byte removes the byte from the receive buffer. If no bytes arrive, the method times out as specified by the 'ReadTimeout' property. 

	Another option for reading bytes is the ReadByte method, which reads one byte at a time:
			Int32 receivedByte;
			receivedByte = myComPort.ReadByte();
			Console.WriteLine(receivedByte);

	Note that the ReadByte method reads a byte but returns an Integer with its high bytes set to zero. If no byte is available, the method waits up to the time specified in the ReceiveTimeout property

Transferring Text
	The SerialPort class provides a variety of methods for reading and writing text data as Strings and Char variables. 

Writing Text
	The Write and WriteLine methods can write text to a port. The Write method used for writing byte arrays can also write Strings:
			String textToWrite;
			textToWrite = "hello, world";

			myComPort.Write(textToWrite);

	The WriteLine method is similar to Write but appends a NewLine character or characters to the String. 
			The default NewLine value is a line feed (LF, or code point U+000A).

			Other possible NewLine values are a carriage return (CR, or U+000D), or a CR followed by a LF.

			The carriage-return and line-feed characters affect how text is printed or displayed on the receiving computer.
					To save bandwidth, software at a receiving computer can convert each received LF into a CR+LF if needed.

			The Write method can also write all or a portion of a Char array to a port. This example places two characters in an array and writes the characters to a port:
					Char[] textToWrite = new Char[2];

					textToWrite[0] = 'h' ;
					textToWrite[1] = 'i';
					myComPort.Write(textToWrite, 0, 2);

Reading Text
	The 'SerialPort' class provides five methods for reading text.

	The 'ReadExisting' method returns a 'String' containing all of the characters in the receive buffer. 

	************************************************************
	'ReadExisting' is the only read method that doesn’t block
	************************************************************
	If the buffer is empty, the method returns an empty String. 'ReadExisting' is the only read method that doesn’t block until receiving data or a timeout.
			String receivedText;
			receivedText = myComPort.ReadExisting();
	
	The ReadLine method returns all received data up to a NewLine character:
			String receivedText; 
			receivedText = myComPort.ReadLine();			

	The returned String contains everything up to the NewLine. The NewLine character(s) are removed from the receive buffer and discarded. If the buffer doesn’t contain a NewLine, the method waits up to the ReadTimeout value and then raises a timeout exception.

Transferring Data
Transferring Bytes
Transferring Text






















184
























