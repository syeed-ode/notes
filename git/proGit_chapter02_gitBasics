	                                                                   |
	                                                                   |
*******************************************************************
*							    *
*							    *
*							    *
toc: 
pg 63 - 
*******************************************************************
*******               Chapter 2 - Git Basics                *******
*******************************************************************
If you’re familiar with other VCS systems such as Subversion, you’ll notice that the command is "clone" and not "checkout". This is an important distinction — instead of getting just a working copy, Git receives a full copy of nearly all data that the server has.
		Every version of every file for the history of the project is pulled down by default when you run git clone. 

		In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there — see Getting Git on a Server for more details).

If you want to clone the repository into a directory named something other than libgit2, you can specify that as the next command-line option:
		$ git clone https://github.com/libgit2/libgit2 mylibgit

Remember that each file in your working directory can be in one of two states: tracked or untracked. 
		Tracked files are files that were in the last snapshot; 
				they can be unmodified, modified, or staged. 

				In short, tracked files are files that Git knows about.

		Untracked files are everything else — any files in your working directory that were not in your last snapshot and are not in your staging area.

Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit); Git won’t start including it in your commit snapshots until you explicitly tell it to do so.

Tracking New Files
		In order to begin tracking a new file, you use the command git add. To begin tracking the README file, you can run this:

Staging Modified Files
		Changes not staged for commit - means that a file that is tracked has been modified in the working directory but not yet staged. 

		To stage it, you run the git add command. git add is a multipurpose command — you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved.

		It may be helpful to think of it more as “add precisely this content to the next commit” rather than “add this file to the project”.

Viewing Your Staged and Unstaged Changes
		git diff - You’ll probably use it most often to answer these two questions: 
				What have you changed but not yet staged? (git diff)
						That command compares what is in your working directory with what is in your staging area. The result tells you the changes you’ve made that you haven’t yet staged.

						It’s important to note that git diff by itself doesn’t show all changes made since your last commit — only changes that are still unstaged. If you’ve staged all of your changes, git diff will give you no output.

				And what have you staged that you are about to commit? (git diff --staged / git diff --cached)
						If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged. This command compares your staged changes to your last commit

						git diff --cached to see what you’ve staged so far (--staged and --cached are synonyms):
						
		Although git status answers those questions very generally by listing the file names, git diff shows you the exact lines added and removed — the patch, as it were.

		Git Diff in an External
				There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead. 

				git difftool
						If you run git difftool instead of git diff, you can view any of these diffs in software like emerge, vimdiff and many more (including commercial products). 

						Run git difftool --tool-help to see what is available on your system.

Committing Your Changes
		Remember that anything that is still unstaged — any files you have created or modified that you haven’t run git add on since you edited them — won’t go into this commit.

		$ git commit
				Launches your editor of choice. (This is set by your shell’s EDITOR environment variable — usually vim or emacs, although you can configure it with whatever you want using the git config --global core.editor command as you saw in Getting Started).

		$ git commit -v (using -m overrides -v)
				Puts the diff of your change in the editor so you can see exactly what changes you’re committing.

		When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).
				
		Anything you didn’t stage is still sitting there modified; you can do another commit to add it to your history. 
				Every time you perform a commit, you’re recording a snapshot of your project that you can revert to or compare to later.

Skipping the Staging Area
		The staging area is sometimes a bit more complex than you need in your workflow. f you want to skip the staging area, Git provides a simple shortcut. Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part.

		The -a flag includes all changed files. This is convenient, but be careful; sometimes this flag will cause you to include unwanted changes.

Removing Files
		










































































































