	                                                                   |
*************************************************************
*************************************************************
*							    *
*							    *
*							    *
pg 120 - 145
*************************************************************
******       Elasticsearch The Definitive Guide        ******
*************************************************************
Datadog and Klout

No individual part of Elasticsearch is new or revolutionary. Full-text search has been done before, as have analytics systems and distributed databases. The revolution is the combination of these individually useful parts into a single, coherent, real-time application. 

Unfortunately, most databases are astonishingly inept at extracting actionable knowledge from your data. Sure, they can filter by timestamp or exact values, but can they perform full-text search, handle synonyms, and score documents by relevance? Can they generate analytics and aggregations from the same data? Most important, can they do this in real time without big batch-processing jobs?

This is what sets Elasticsearch apart: Elasticsearch encourages you to explore and utilize your data, rather than letting it rot in a warehouse because it is too difficult to query.

Elasticsearch is your new best friend.

CHAPTER 1: You Know, for Search…
Lucene is arguably the most advanced, high-performance, and fully featured search engine library in existence today—both open source and proprietary.

Elasticsearch is also written in Java and uses Lucene internally for all of its indexing and searching, but it aims to make full-text search easy by hiding the complexities of Lucene behind a simple, coherent, RESTful API.


However, Elasticsearch is much more than just Lucene and much more than “just” full-text search. It can also be described as follows:
	• A distributed real-time document store where every field is indexed and searchable
	• A distributed search engine with real-time analytics
	• Capable of scaling to hundreds of servers and petabytes of structured and unstructured data

Installing Marvel
	It looks like Marvel is incompatable with ES 6.2.4, only with 5.0. I need to do more research on this...

	But this error is interesting: 'ERROR: `elasticsearch` directory is missing in the plugin zip'
			[20180411-13:36:21 syeedode:~/elasticsearch-6.2.3] $ bin/elasticsearch-plugin install file:///Users/syeedode/elasticsearch-6.2.3/license-2.4.6.zip 
			-> Downloading file:///Users/syeedode/elasticsearch-6.2.3/license-2.4.6.zip
			[=================================================] 100%   
			ERROR: `elasticsearch` directory is missing in the plugin zip

			https://stackoverflow.com/questions/45987194/elasticsearch-install-custom-plugins-results-in-error-elasticsearch-directory
	
	You must unzip the content of a the zip directory into an elasticsearch directory and then rezip them.
			[20180411-13:40:57 syeedode:~/Downloads] $ mkdir elasticsearch
			[20180411-13:41:08 syeedode:~/Downloads] $ cp license-2.4.6.zip elasticsearch/
			[20180411-13:41:14 syeedode:~/Downloads] $ cd elasticsearch/
			[20180411-13:41:18 syeedode:~/Downloads/elasticsearch] $ unzip license-2.4.6.zip 
				Archive:  license-2.4.6.zip
				  inflating: LICENSE.txt             
				  inflating: plugin-descriptor.properties  
				  inflating: NOTICE.txt              
				  inflating: license-core-2.4.6.jar  
				  inflating: license-plugin-api-2.4.6.jar  
				  inflating: license-2.4.6.jar       
			[20180411-13:41:20 syeedode:~/Downloads/elasticsearch] $ cd ..
			[20180411-13:42:28 syeedode:~/Downloads] $ zip -r elasticsearch-license-2.4.6.zip elasticsearch
				  adding: elasticsearch/ (stored 0%)
				  adding: elasticsearch/license-plugin-api-2.4.6.jar (deflated 29%)
				  adding: elasticsearch/NOTICE.txt (deflated 16%)
				  adding: elasticsearch/license-2.4.6.jar (deflated 14%)
				  adding: elasticsearch/license-core-2.4.6.jar (deflated 11%)
				  adding: elasticsearch/LICENSE.txt (deflated 72%)
				  adding: elasticsearch/plugin-descriptor.properties (deflated 61%)
			[20180411-13:43:15 syeedode:~/elasticsearch-6.2.3] $ bin/elasticsearch-plugin install file:///Users/syeedode/Downloads/elasticsearch-license-2.4.6.zip 
				-> Downloading file:///Users/syeedode/Downloads/elasticsearch-license-2.4.6.zip
				[=================================================] 100%   
				Exception in thread "main" java.lang.IllegalArgumentException: plugin [license] is incompatible with version [6.2.3]; was designed for version [2.4.6]
					at org.elasticsearch.plugins.PluginInfo.readFromProperties(PluginInfo.java:237)
					at org.elasticsearch.plugins.PluginInfo.readFromProperties(PluginInfo.java:184)
					at org.elasticsearch.plugins.InstallPluginCommand.loadPluginInfo(InstallPluginCommand.java:571)
					at org.elasticsearch.plugins.InstallPluginCommand.installPlugin(InstallPluginCommand.java:707)
					at org.elasticsearch.plugins.InstallPluginCommand.install(InstallPluginCommand.java:623)
					at org.elasticsearch.plugins.InstallPluginCommand.execute(InstallPluginCommand.java:223)
					at org.elasticsearch.plugins.InstallPluginCommand.execute(InstallPluginCommand.java:212)
					at org.elasticsearch.cli.EnvironmentAwareCommand.execute(EnvironmentAwareCommand.java:86)
					at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)
					at org.elasticsearch.cli.MultiCommand.execute(MultiCommand.java:75)
					at org.elasticsearch.cli.Command.mainWithoutErrorHandling(Command.java:124)
					at org.elasticsearch.cli.Command.main(Command.java:90)
					at org.elasticsearch.plugins.PluginCli.main(PluginCli.java:48)

	Ok. Enough of that, let's worry about this later.

	Besides, I'm starting to think that whatever Marvel has to offer, it has subsequently been replaced by kibana.

Running Elasticsearch
	Elasticsearch is now ready to run. You can start it up in the foreground with this:
			./bin/elasticsearch
	
	Add -d if you want to run it in the background as a daemon.
			[20180411-13:47:17 syeedode:~/elasticsearch-6.2.3] $ curl --user elastic:password 'http://localhost:9200/?pretty'
				{
				  "name" : "zxSbBx1",
				  "cluster_name" : "elasticsearch",
				  "cluster_uuid" : "qrSdWDz3QrqAShneKkVnlw",
				  "version" : {
				    "number" : "6.2.3",
				    "build_hash" : "c59ff00",
				    "build_date" : "2018-03-13T10:06:29.741383Z",
				    "build_snapshot" : false,
				    "lucene_version" : "7.2.1",
				    "minimum_wire_compatibility_version" : "5.6.0",
				    "minimum_index_compatibility_version" : "5.0.0"
				  },
				  "tagline" : "You Know, for Search"
				}

	This means that your Elasticsearch cluster is up and running, and we can start experimenting with it. 

	A 'node' is a running instance of Elasticsearch. A 'cluster' is a group of nodes with the same 'cluster.name' that are working together to share data and to provide failover and scale, although a single node can form a cluster all by itself.

	You can shutdown.
			[20180411-14:31:19 syeedode:~/elasticsearch-6.2.3] $ curl --user elastic:password -XPUT http://localhost:9200/shutdown | json_pp
			{
			   "shards_acknowledged" : true,
			   "index" : "shutdown",
			   "acknowledged" : true
			}

Talking to Elasticsearch
	Java API
		Node client - The node client joins a local cluster as a 'non data node'. In other words, it doesn’t hold any data itself, but it knows what data lives on which node in the cluster, and can forward requests directly to the correct node.

		Transport client - The lighter-weight transport client can be used to send requests to a remote cluster. It doesn’t join the cluster itself, but simply forwards requests to a node in the cluster.

		Both Java clients talk to the cluster over port 9300, using the native Elasticsearch transport protocol. The nodes in the cluster also communicate with each other over port 9300. If this port is not open, your nodes will not be able to form a cluster.
				The Java client must be from the same version of Elasticsearch as the nodes; otherwise, they may not be able to understand each other

	RESTful API with JSON over HTTP
		All other languages can communicate with Elasticsearch over port 9200 using a RESTful API, accessible with your favorite web client.
				Elasticsearch provides official clients for several languages -— Groovy, JavaScript, .NET, PHP, Perl, Python, and Ruby -— and there are numerous community-provided clients and integrations, all of which can be found in the Guide.

				https://www.elastic.co/guide/en/elasticsearch/client/index.html

Document Oriented
	Elasticsearch is document oriented, meaning that it stores entire objects or 'documents'.  It not only stores them, but also 'indexes' **the contents** of each document in order to make them searchable.

	In Elasticsearch, you index, search, sort, and filter documents —- not rows of columnar data.

	This is a fundamentally different way of thinking about data and is one of the reasons Elasticsearch can perform complex full-text search.

JSON
	Elasticsearch uses JavaScript Object Notation, or JSON, as the serialization format for documents. JSON serialization has become the standard format used by the NoSQL movement.

Let’s Build an Employee Directory
	
Indexing Employee Documents
	The first order of business is storing employee data. This will take the form of an employee document’: a single document represents a single employee. 

	The act of storing data in Elasticsearch is called 'indexing', but before we can index a document, we need to decide 'where' to store it.

	In Elasticsearch, a 'document' belongs to a 'type', and those 'types' live inside an 'index'.

	You can draw some (rough) parallels to a traditional relational database:
			Relational DB ⇒ Databases ⇒ Tables ⇒ Rows ⇒ Columns
			Elasticsearch ⇒ Indices ⇒ Types ⇒ Documents ⇒ Fields










		










































