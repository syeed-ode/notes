	                                                                   |
*************************************************************
*************************************************************
* Relational DB ⇒ Databases ⇒ Tables ⇒ Rows      ⇒ Columns
* Elasticsearch ⇒ Indices   ⇒ Types  ⇒ Documents ⇒ Fields
*************************************************************
*************************************************************
*							    *
*							    *
*							    *
pg 111 -  128
*************************************************************
******        Chapter 8 - Sorting and Relevance        ******
*************************************************************
By default, results are returned sorted by 'relevance' -— with the most relevant docs first. 

Later in this chapter, we explain what we mean by 'relevance' and how it is calculated, but let’s start by looking at the sort parameter and how to use it.

Sorting
	In Elasticsearch, the 'relevance score' is represented by the floating-point number returned in the search results as the '_score', so the default sort order is '_score' descending.

	Sometimes, though, you don’t have a meaningful relevance score. For instance, the following query just returns all tweets whose user_id field has the value 1:
			GET /_search
			{
			   "query" : { "filtered" : {"filter" : {"term" : { "user_id" : 1}} } }
			}

	Filters have no bearing on _score, and the missing-but-implied match_all query just sets the _score to a neutral value of 1 for all documents. 

	In other words, all documents are considered to be equally relevant.

Sorting by Field Values
	In this case, it probably makes sense to sort tweets by recency, with the most recent tweets first. We can do this with the 'sort' parameter:
			GET /_search
			{
			   "query" : { "filtered" : { "filter" : { "term" : {"user_id" : 1} } } },
			   "sort" : { "date" : {"order" : "desc"} }
			}

	In ES 6.2.3 the query to accomplish this is slightly different
			GET /_search
			{
				"query": { "term": { "user_id": 1 } }
			  , "sort" : { "date": { "order"  : "desc" }}
			}

	The results are slightly different as well.
			2.4.6

			HTTP/1.1 200 OK
			Content-Type: application/json; charset=UTF-8
			Content-Length: 2318

			{
			  "took" : 35,
			  "timed_out" : false,
			  "_shards" : {
			    "total" : 19,
			    "successful" : 10,
			    "failed" : 9,
			    "failures" : [ {
			      "shard" : 0,
			      "index" : ".marvel-es-1-2018.04.13",
			      "node" : "rJ80GnL3RGG15w9RgZ0wDg",
			      "reason" : {
			        "type" : "search_parse_exception",
			        "reason" : "No mapping found for [date] in order to sort on"
			      }
			    } ]
			  },
			  "hits" : {
			    "total" : 6,
			    "max_score" : null,
			    "hits" : [ {
			      "_index" : "us",
			      "_type" : "tweet",
			      "_id" : "14",
			      "_score" : null,
			      "_source" : {
			        "date" : "2014-09-24",
			        "name" : "John Smith",
			        "tweet" : "How many more cheesy tweets do I have to write?",
			        "user_id" : 1
			      },
			      "sort" : [ 1411516800000 ]
			    }, {
			      "_index" : "us",
			      "_type" : "tweet",
			      "_id" : "12",
			      "_score" : null,
			      "_source" : {
			        "date" : "2014-09-22",
			        "name" : "John Smith",
			        "tweet" : "Elasticsearch and I have left the honeymoon stage, and I still love her.",
			        "user_id" : 1
			      },
			      "sort" : [ 1411344000000 ]
			    } ]
			  }
			}

	The results are slightly different as well.
			{
			   "_shards" : {
			      "skipped" : 0,
			      "failures" : [
			         {
			            "index" : ".monitoring-alerts-6",
			            "reason" : {
			               "reason" : "No mapping found for [date] in order to sort on",
			               "index" : ".monitoring-alerts-6",
			               "type" : "query_shard_exception",
			               "index_uuid" : "TMPZ-6WPSEmD4lfzgm-0bQ"
			            },
			            "node" : "zxSbBx1PQJWElyUC3-lteQ",
			            "shard" : 0
			         },
			         {
			            "shard" : 0,
			            "node" : "zxSbBx1PQJWElyUC3-lteQ",
			            "reason" : {
			               "index_uuid" : "gN50wyAYTs26dYtqezY0_w",
			               "type" : "query_shard_exception",
			               "reason" : "No mapping found for [date] in order to sort on",
			               "index" : ".monitoring-es-6-2018.04.16"
			            },
			            "index" : ".monitoring-es-6-2018.04.16"
			         }
			      ],
			      "failed" : 39,
			      "total" : 54,
			      "successful" : 15
			   },
			   "took" : 34,
			   "timed_out" : false,
			   "hits" : {
			      "hits" : [
			         {
			            "_source" : {
			               "name" : "John Smith",
			               "date" : "2014-09-24",
			               "user_id" : 1,
			               "tweet" : "How many more cheesy tweets do I have to write?"
			            },
			            "_index" : "use",
			            "sort" : [
			               1411516800000
			            ],
			            "_score" : null,
			            "_type" : "tweet",
			            "_id" : "14"
			         },
			         {
			            "_index" : "use",
			            "_source" : {
			               "tweet" : "Elasticsearch and I have left the honeymoon stage, and I still love her.",
			               "user_id" : 1,
			               "date" : "2014-09-22",
			               "name" : "John Smith"
			            },
			            "_score" : null,
			            "sort" : [
			               1411344000000
			            ],
			            "_type" : "tweet",
			            "_id" : "12"
			         },
			         {
			            "_id" : "10",
			            "_type" : "tweet",
			            "_score" : null,
			            "sort" : [
			               1411171200000
			            ],
			            "_source" : {
			               "user_id" : 1,
			               "date" : "2014-09-20",
			               "name" : "John Smith",
			               "tweet" : "Elasticsearch surely is one of the hottest new NoSQL products"
			            },
			            "_index" : "use"
			         },
			         {
			            "_source" : {
			               "tweet" : "@mary it is not just text, it does everything",
			               "name" : "John Smith",
			               "user_id" : 1,
			               "date" : "2014-09-14"
			            },
			            "_index" : "use",
			            "_score" : null,
			            "sort" : [
			               1410652800000
			            ],
			            "_type" : "tweet",
			            "_id" : "4"
			         }
			      ],
			      "max_score" : null,
			      "total" : 5
			   }
			}

	The '_score' is not calculated, because it is not being used for sorting. This is why it is 'null'.

	The value of the 'date' field, expressed as milliseconds since the epoch, is returned in the sort values.

	You will notice two differences in the results, The first is that we have a new element in each result called 'sort', which contains the value(s) that was used for sorting.
			In this case, we sorted on date, which internally is indexed as milliseconds since the epoch. 

	The second is that the '_score' and 'max_score' are both 'null'. Calculating the '_score' can be quite expensive. 

	Usually its only purpose is for sorting; we’re not sorting by relevance, so it doesn’t make sense to keep track of the _score. 

	If you want the '_score' to be calculated regardless, you can set the 'track_scores' parameter to 'true'.

	
	As a shortcut, you can specify just the name of the field to sort on. Fields will be sorted in ascending order by default, and the _score value in descending order:
			"sort": "number_of_children"

Multilevel Sorting
	Perhaps we want to combine the '_score' from a query with the date, and show all matching results sorted first by 'date', then by relevance.
			GET /_search
			{
				"query" : {
					"filtered" : {
						"query": { "match": { "tweet": "manage text search" }},
						"filter" : { "term" : { "user_id" : 2 }}
					}
				},
				"sort": [
					{ "date": { "order": "desc" }},
					{ "_score": { "order": "desc" }}
				]
			}
	In 6.2.3

	Order is important. Results are sorted by the first criterion first. Only results whose first sort value is identical will then be sorted by the second criterion, and so on.

	Multilevel sorting doesn’t have to involve the _score. You could sort by using several different fields, on geo-distance or on a custom value calculated in a script.

	Query-string search also supports custom sorting, using the 'sort' parameter in the query string.

Sorting on Multivalue Fields
	When sorting on fields with more than one value, remember that the values do not have any intrinsic order; a multivalue field is just a bag of values. Which one do you choose to sort on?

	For numbers and dates, you can reduce a multivalue field to a single value by using the 'min', 'max', 'avg', or 'sum' 'sort modes'. For instance, you could sort on the earliest 'date' in each dates field by using the following:
			{
			   "sort" : {
			      "dates" : {
			         "order" : "asc",
			         "mode" : "min"
			      }
			   }
			}

String Sorting and Multields (pg114; pg 147, pdf)
	Analyzed string fields are also multivalue fields, but sorting on them seldom gives you the results you want. 

	If you analyze a string like 'fine old art', it results in three terms. 

	We probably want to sort alphabetically on the first term, then the second term, and so forth, but Elasticsearch doesn’t have this information at its disposal at sort time.

	In order to sort on a string field, that field should contain one term only: the whole 'not_analyzed' string. But of course we still need the field to be 'analyzed' in order to be able to query it as full text.
			The naive approach to indexing the same string in two ways would be to include two separate fields in the document: one that is 'analyzed' for searching, and one that is 'not_analyzed' for sorting.

			But storing the same string twice in the '_source' field is waste of space. 

			What we really want to do is to pass in a 'single field' but to 'index it in two different ways'. 

			All of the core field types (strings, numbers, Booleans, dates) accept a fields parameter that allows you to transform a simple mapping like:
					"tweet": { "type": "string", "analyzer": "english" }

			into a 'multifield' mapping like this:
					"tweet": { 
							   "type": "string",
							   "analyzer": "english",
							   "fields": {	"raw": { "type": "string",	"index": "not_analyzed" } }
						     }

		     The main tweet field is just the same as before: an 'analyzed' full-text field.

		     The new 'tweet.raw' subfield is not_analyzed.

     Now, or at least as soon as we have reindexed our data, we can use the tweet field for search and the tweet.raw field for sorting:
			GET /_search
			{
			   "sort" : "tweet.raw",
			   "query" : {
			      "match" : {
			         "tweet" : "elasticsearch"
			      }
			   }
			}

	Sorting on a full-text analyzed field can use a lot of memory. See “Fielddata” on page 119 (Chapter 8, Sorting and Relevance) for more information.

What Is Relevance?
	The relevance score of each document is represented by a positive floating-point number called the '_score'. The higher the '_score', the more relevant the document.

	A query clause generates a '_score' for each document. 
			A 'fuzzy' query might determine the '_score' by calculating how similar the spelling of the found word is to the original search term.

			A 'terms' query would incorporate the percentage of terms that were found.

			However, uaually 'relevance' is the algorithm that we use to calculate how similar the 'contents of a fulltext field' are to a 'full-text query string'.

	Relevance is the algorithm that we use to calculate how similar the contents of a fulltext field are to a full-text query string.

	The standard 'similarity algorithm' used in Elasticsearch is known as 'term frequency'/'inverse document frequency', or TF/IDF, which takes the following factors into account.

	Term Frequency / Inverse Document Frequency (TF/IDF)
		Term frequency
			How often does the term appear in the field? The more often, the more relevant. 

			A field containing five mentions of the same term is more likely to be relevant than a field containing just one mention.

		Inverse document frequency
			How often does each term appear in the index? The more often, the 'less' relevant. Terms that appear in many documents have a lower 'weight' than moreuncommon terms.

		Field-length norm
			How long is the field? The longer it is, the less likely it is that words in the field will be relevant. A term appearing in a short 'title' field carries more weight than the same term appearing in a long 'content' field.
			
	Individual queries may combine the TF/IDF score with other factors such as the term proximity in phrase queries, or term similarity in fuzzy queries.

	Relevance is not just about full-text search, though. It can equally be applied to yes/no clauses, where the more clauses that match, the higher the '_score'.

	When multiple query clauses are combined using a compound query like the 'bool' query, the '_score' from each of these query clauses is combined to calculate the overall '_score' for the document.

	We have a whole chapter dedicated to relevance calculations and how to bend them to your will: Chapter 17.

Understanding the Score
	When debugging a complex query, it can be difficult to understand exactly how a '_score' has been calculated.

			HTTP/1.1 200 OK
			content-type: application/json; charset=UTF-8
			content-length: 563

			{
			  "took" : 31,
			  "timed_out" : false,
			  "_shards" : {
			    "total" : 64,
			    "successful" : 64,
			    "skipped" : 0,
			    "failed" : 0
			  },
			  "hits" : {
			    "total" : 1,
			    "max_score" : 0.6580346,
			    "hits" : [
			      {
			        "_index" : "use",
			        "_type" : "tweet",
			        "_id" : "12",
			        "_score" : 0.6580346,
			        "_source" : {
			          "date" : "2014-09-22",
			          "name" : "John Smith",
			          "tweet" : "Elasticsearch and I have left the honeymoon stage, and I still love her.",
			          "user_id" : 1
			        }
			      }
			    ]
			  }
			}

			curl -i -XGET -H "content-type: application/json; charset=UTF-8" --user elastic:cfu0blVplXHcUnOkX74u 'http://localhost:9623/_search?explain&pretty' -d '{"query" : { "match" : { "tweet" : "honeymoon" }}
			}'

			/Users/syeedode/junk/latest_2.4.6Output
			2.4.6

			HTTP/1.1 200 OK
			Content-Type: application/json; charset=UTF-8
			Content-Length: 1382

			{
			  "took" : 47,
			  "timed_out" : false,
			  "_shards" : {
			    "total" : 18,
			    "successful" : 18,
			    "failed" : 0
			  },
			  "hits" : {
			    "total" : 1,
			    "max_score" : 0.35136628,
			    "hits" : [ {
			      "_shard" : 1,
			      "_node" : "keH5OjpGScWZZXoNnZPecQ",
			      "_index" : "us",
			      "_type" : "tweet",
			      "_id" : "12",
			      "_score" : 0.35136628,
			      "_source" : {
			        "date" : "2014-09-22",
			        "name" : "John Smith",
			        "tweet" : "Elasticsearch and I have left the honeymoon stage, and I still love her.",
			        "user_id" : 1
			      },
			      "_explanation" : {
			        "value" : 0.35136628,
			        "description" : "weight(tweet:honeymoon in 2) [PerFieldSimilarity], result of:",
			        "details" : [ {
			          "value" : 0.35136628,
			          "description" : "fieldWeight in 2, product of:",
			          "details" : [ {
			            "value" : 1.0,
			            "description" : "tf(freq=1.0), with freq of:",
			            "details" : [ {
			              "value" : 1.0,
			              "description" : "termFreq=1.0",
			              "details" : [ ]
			            } ]
			          }, {
			            "value" : 1.4054651,
			            "description" : "idf(docFreq=1, maxDocs=3)",
			            "details" : [ ]
			          }, {
			            "value" : 0.25,
			            "description" : "fieldNorm(doc=2)",
			            "details" : [ ]
			          } ]
			        } ]
			      }
			    } ]
			  }
			}

			curl -i -XGET  'http://localhost:9200/_search?explain&pretty' -d '{"query" : { "match" : { "tweet" : "honeymoon" }}
			}'
			/Users/syeedode/junk/latest_2.4.6Output
			2.4.6

	The 'explain' parameter adds an explanation of how the '_score' was calculated to every result.
			Adding explain produces a lot of output for every hit, which can look overwhelming, but it is worth taking the time to understand what it all means. 

	First, we have the metadata that is returned on normal search requests:
			{
				"_index" : "use",
				"_type" : "tweet",
				"_id" : "12",
				"_score" : 0.6580346,
				"_source" : {			}
			}















	































