	                                                                   |

Searching a Linked List
	Arrays and linked lists have the same efficiency for search.
			Searching is looking for a particular piece of data within the list and getting its index

	With both arrays and linked lists, the program needs to start at the first cell and look through each and every cell until it finds the value it’s searching for.

	In a worst case scenario - where the value we’re searching for is in the final cell or not in the list altogether - it would take O(N) steps.

Insertion into a Linked List
	Insertion is one operation in which linked lists can have a distinct advantage over arrays in certain situations. 
			The worst case scenario for insertion into an array is when the program inserts data into index 0, 
					It then has to shift the rest of the data one cell to the right

					Yielding an efficiency of O(N).

	With linked lists, however, insertion at the beginning of the list takes just one step - which is O(1).
			If we wanted to add "yellow" to the beginning of the list, all we have to do is create a new node and have it link to the node containing "blue":

	The truth is that, theoretically, inserting data anywhere within a linked list takes just one step, but there’s one gotcha.
			The actual insertion takes one step, since we create a new node and modify the links.

			However, the computer first needs to find the node at index 1 ("blue") so it can modify its link to point to the newly created node.

			As we’ve seen, though, reading from a linked list already takes O(N). 

	Interestingly, our analysis shows that the best and worst case scenarios for arrays and linked lists are the opposite of one another.
			That is, inserting at the beginning is great for linked lists, but terrible for arrays. 

			And inserting at the end is an array’s best case scenario, but the worst case when it comes to a linked list. 

			The following table breaks this all down:

		Scenario 				Array 				Linked List
		--------------------------------------------------------
		Insert at beginning 	Worst Case 			Best Case
		Insert at middle 		Average Case 		Average Case
		Insert at end 			Best Case 			Worst Case


Deletion
	Deletion is very similar to insertion in terms of efficency. 

	To delete a node from the beginning of a linked list: We change the first_node of the linked list to now point to the second node.

	Let’s return to our example of the linked list containing the values "once", "upon", "a", and "time". 
			If we wanted to delete the value "once", we simply change the linked list to begin at "upon":
					list.first_node = node_2

	Contrast this with an array in which deleting the first element means shifting all remaining data one cell to the left, an efficiency of O(N).

	When it comes to deleting the final node of a linked list, the actual deletion takes one step - we just take the second-to-last node and make its link null. 
			However, it takes N steps to first get to the second-to-last node

			Since we need to start at the beginning of the list and follow the links until we reach it.

	To delete from the middle of the list, the computer must modify the link of the preceeding node. 
			The following example will make this clear.

			Let’s say that we want to delete the value at index 2 ("purple") from the above linked list. The computer finds index 1, and switches its link to point to the "green" node:

			yellow->blue->.        ->green->red->null
						<x>purple<x>

	Here is the delete operation
		class LinkedList
			attr_accessor :first_node

			# rest of code omitted here...
			
			def delete_at_index(index)
				current_node = first_node
				current_index = 0
			
				# First, we find the node immediately before the one we
				# want to delete and call it current_node:
				while current_index < index - 1 do
					current_node = current_node.next_node
					current_index += 1
				end

				# We find the node that comes after the one we're deleting:
				node_after_deleted_node = current_node.next_node.next_node
				
				# We change the link of the current_node to point to the
				# node_after_deleted_node, leaving the node we want
				# to delete out of the list:
				current_node.next_node = node_after_deleted_node
			end
		end

Linked Lists in Action
	One case where linked lists shine are when we examine a single list and delete many elements from it.
			Let’s say, for example, that we were building an application that combs through lists of email addresses and removes any email address that has an invalid format. 
					Our algorithm inspects each and every email address one at a time, and uses a regular expression to determine whether the email address is invalid. 

					If it’s invalid, we remove it from the list.

					No matter whether the list is an array or a linked list, we need to comb through the entire list one element at a time to inspect each value, which would take N steps.

			Let’s examine what happens when we actually delete email addresses.
					With an array, each time we delete an email address, 
							We need another O(N) steps to shift the remaining data to the left to close the gap.

							All this shifting will happen before we can even inspect the next email address.

							So besides the N steps of reading each email address, we need another N steps multipled by invalid email addresses to account for deletion of invalid email addresses.
									Let’s assume that 1 in 10 email addresses are invalid. 

									If we had a list of 1,000 email addresses, there would be approximately 100 invalid ones, 

									Our algorithm would take 1,000 steps for reading plus about 100,000 steps for deletion (100 invalid email addresses * N).

					With a linked list, however, as we comb through the list, each deletion takes just one step.
							We can simply change a node’s link to point the appropriate node and move on. 

							For our 1,000 emails, then, our 
									algorithm would take just 1,100 steps, 
											as there are 1,000 reading steps, and 

											100 deletion steps.

Doubly Linked Lists
	Another interesting application of a linked list is that it can be used as the underlying data structure behind a queue.

	Queues are list of items in which data can only be inserted at the end, and removed from the beginning. 

	We can use a linnkedList as a basis for a queue. We must enforce the same constraints of only inserting data at the end and removing data from the beginning.

	Does using a linked list instead of an array have any advantages? Let’s analyze this.
			Again, the queue inserts data at the end of the list. 

			Arrays will be superior when it comes to inserting data, 
					since we’d be able to do so at an efficiency of O(1). 

			Linked lists, on the other hand, 
					would insert data at O(N). 

	So when it comes to insertion, the array would make for a better choice than a linked list.

	When it comes to deleting data from a queue, though, linked lists would be faster, since it would be O(1) compared to arrays which delete data from the beginning at O(N).

	Based on this analysis, it would seem that it doesn’t matter whether we use an array or a linked list, as we’d end up with one major operation that is O(1) and another that is O(N).

	For arrays, insertion is O(1) and deletion is O(N), and for linked lists, insertion is O(N) and deletion is O(1).

	However, if we use a special variant of a linked list called the doubly linked list, we’d be able to insert and delete data from a queue at O(1).

	A doubly linked list is like a linked list, except that each node has two links - 
			one that points to the next node, and 

			one that points to the preceeding node.

	In addition, the doubly linked list keeps track of both the first and last nodes.

	Since a doubly linked list always know where both its first and last nodes are, we can access each of them in a single step, or O(1).

	Similarly, we can insert data at the end of a doubly linked list in one step.
			We create a new node ("Sue"), and have its previous_node point to the last_node of the linked list ("Greg"). 

			Then, we change the next_node of the last_node ("Greg") to point to this new node ("Sue"). 

			Finally, we declare the new node ("Sue") to be the last_node of the linked list.

	Because doubly linked lists have immediate access to both the front and end of the list, they can insert data on either side at O(1) as well as delete data on either side at O(1).

	Since doubly linked lists can insert data at the end in O(1) time and delete data from the front in O(1) time, they make the perfect underlying data structure for a queue.

	You could implement a queue that is built upon a doubly linked list.

Wrapping Up (pg. 164)
	You’ve learned how linked lists can be useful for boosting performance in certain situations.

	In the next chapters, we’re going to learn about more complex node based data structures that are more common, and used in many everyday circumstances to make applications run at greater efficiency.




					








































