	                                                                   |

				Why Algorithms Matter

There is another major factor that can affect the efficiency of our code: The proper selection of which 'algorithm' to use.

An algorithm is simply a particular process for solving a problem. The process for preparing a bowl of cereal can be called an algorithm.
		1. Grab a bowl.
		2. Pour cereal in the bowl.
		3. Pour milk in the bowl.
		4. Dip a spoon in the bowl.

In the previous chapter, we analyzed four major operations, including reading, searching, insertion, and deletion.

There are multiple algorithms that can achieve a particular operation.

We’re about to see how the selection of a particular algorithm can either make our code fast or slow - even to the point where it stops working under a lot of pressure. 
		But first, let’s take a look at a new data structure, the ordered array. 

		We’ll see how there is more than one algorithm for searching an ordered array, and we’ll learn how to choose the right one.

Ordered Arrays
	The 'ordered array' is almost identical to the array we discussed in the previous chapter.

	For example, let’s take the array [3, 17, 80, 202]:
			Assume that we wanted to insert the value 75.

			The computer cannot simply drop the 75 into the right slot in a single step, because first it has to 
					find the right place in which the 75 needs to be inserted, and then 

					shift other values to make room for it.

	Let’s break down this process step by step.
			Step #1: 
					We check the value at index 0, to determine whether the value we want to insert - the 75 - should go to its left or to its right:

			Step #2:
					We’ve encountered the value 80, which is greater than the 75 that we wish to insert. 

					We need to shift data to make room for the 75.

			Step #3:
					Move the final value to the right, move the next to last value to the right, 

			Step #4:
					We can finally insert the 75 into its correct spot.

	Inserting into an ordered array always requires a search before the actual insertion to determine the correct spot for the insertion.
			That is one key difference (in terms of efficiency) between a standard array and an ordered array.

	The ordered array has a secret superpower when it comes to the search operation.

Searching an Ordered Array
	In the previous chapter, we described the process for searching for a particular value within a regular array: 
			We check each cell one at a time - from left to right - until we find the value we’re looking for. 

	We noted that this process is referred to as linear search.

	Let’s see how linear search differs between a regular and ordered array.
			With an ordered array, however, we can stop a search early even if the value isn’t contained within the array.

			Let’s say we’re searching for a 22 within an ordered array of [3, 17, 75, 80, 202].
			 		We can stop the search as soon as we reach the 75, since it’s impossible that the 22 is anywhere to the right of it.
							def linear_search(array, value)
							  # We iterate through every element in the array:
							  array.each do |element|
							  # If we find the value we're looking for, we return it:
							    if element == value
							      puts value
							      return value
							    elsif element > value
								  # If we reach an element that is greater than the value
								  # we're looking for, we can exit the loop early:
							      break
							    end
							  end
							  # We return nil if we do not find the value within the array:
							  return nil
							end

			In this light, linear search will take fewer steps in an ordered array versus a standard array in most situations. That being said, 
					if we’re searching for a value that happens to be the final value or greater than the final value, 

			We will still end up searching each and every cell.  

Binary Search
	You’ve probably played this guessing game: I’m thinking of a number between 1 and 100.
			You wouldn’t start the guessing by choosing the number 1. You’d start with 50 which is smack in the middle.
					Why? Because by selecting 50, no matter whether I tell you to guess higher or lower, you’ve automatically eliminated half the possible numbers!

					You’d keep on choosing the halfway mark in order to keep eliminating half of the remaining numbers.

	This, in a nutshell, is binary search.
			The major advantage of an ordered array over a standard array is that we have the option of performing a binary search rather than a linear search.

Binary Search Vs. Linear Search
	Linear Search: 100 steps. 

	Binary Search: 7 steps.
			
	Let’s see what happens with larger arrays. With an array containing 100 values, the maximum number of steps it takes for search:			
			With linear search, 
					if the value we’re searching for is in the final cell, or 

					is greater than the value in the final cell, 

					we have to inspect each and every element. For an array which is the size of 100, 
							this would take 100 steps.

			When we use binary search, however, 
					each guess we make eliminates half of the possible cells we’d have to search. 

					In our very first guess, we get to eliminate a whopping 50 cells.

			Let’s look at this another way, and we’ll see a pattern emerge:
					With an array of size 3, the maximum number of steps it would take to find something using binary search is 2.

					If we double the number of cells in the array (and add one more to keep the number odd for simplicity’s sake), there are 7 cells. For such an array, the maximum number of steps to find something using binary search is 3.

					If we double it again (and add one) so that the ordered array contains 15 elements, the maximum number of steps to find something using binary search is 4.

					The pattern that emerges is that 

			For every time we double the number of items in the ordered array, the number of steps needed for binary search increases by just one.
					Contrast this with linear search. If you had 3 items, you’d need up to 3 steps.

					With linear search, there are as many steps as there are items.
							For linear search, 
									every time we double the number of elements in the array, 

									we double the number of steps we need to find something. 

							For binary search, 
									every time we double the number of elements in the array, 

									we only need to add one more step.

					With an array of 10,000 elements, a linear search can take up to 10,000 steps, while 

					binary search takes up to a maximum of just 13 steps.

	By using an ordered array, 
			you have somewhat slower insertion, 
					Inserting into an ordered array always requires a search before the actual insertion to determine the correct spot for the insertion.
							That is one key difference (in terms of efficiency) between a standard array and an ordered array.

			but much faster search. 
					Again, you must always analyze your application to see what is a better fit.

Wrapping Up
	Just because ordered arrays allow for binary search doesn’t mean you should always use ordered arrays. 

	In situations where you don’t anticipate searching the data much, but only adding data, 
			standard arrays may be a better choice because their insertion is faster.

	The way to analyze competing algorithms is to count the number of steps each one takes.
			We’re going to learn about a formalized way of expressing the time complexity of competing data structures and algorithms. 

			Having this common language will give us clearer information that will allow us to make better decisions in which algorithms we choose.
pg 40 [27]






















					











































