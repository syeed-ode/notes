	                                                                   |
	                                                                   |
*******************************************************************
https://serverless-stack.com/chapters/create-a-dynamodb-table.html
*******************************************************************
*******************************************************************
*							    *
*							    *
*							    *
*******************************************************************
******************    Create a DynamoDB Table     *****************
*******************************************************************
https://966118849566.signin.aws.amazon.com/console

To build the backend for our notes app, it makes sense that we first start by thinking about how the data is going to be stored. 
		We are going to use DynamoDB to do this.

		https://aws.amazon.com/dynamodb/

About DynamoDB
	Amazon DynamoDB is a fully managed NoSQL database that provides fast and predictable performance with seamless scalability. 

	Similar to other databases, DynamoDB stores data in tables. 
			Each table contains multiple items, and each item is composed of one or more attributes. 

			To get a better feel for it, here is a great guide on DynamoDB. 
					https://www.dynamodbguide.com/

Create Table
	First, log in to your AWS Console and select DynamoDB from the list of services.
			

	Select Create table. (userTable)

			Enter the Table name and Primary key info as shown below. Just make sure that userId and noteId are in camel case.

			Each DynamoDB table has a primary key, which cannot be changed once set. 
					The primary key uniquely identifies each item in the table, so that no two items can have the same key. 

			DynamoDB supports two different kinds of primary keys:
					- Partition key

					- Partition key and sort key (composite)

			The composite primary key gives us additional flexibility when querying the data.
					For example, if you provide only the value for userId, DynamoDB would retrieve all of the notes by that user.

					Or you could provide a value for userId and a value for noteId, to retrieve a particular note.

					To further your understanding of how indexes work in DynamoDB, you can read more here: 
							https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html


	Scroll to the bottom, ensure that DynamoDB AutoScaling Service Linked Role is selected, and select Create.
			https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/AutoScaling.Console.html#AutoScaling.Permissions

			Before You Begin: Grant User Permissions for DynamoDB Auto Scaling
					For DynamoDB auto scaling, IAM users will require some additional privileges.

					'application-autoscaling:*' permissions are required to delete an autoscaling enabled table. 

					The AWS-managed policy DynamoDBFullAccess attached next includes such permissions.

					To attach the AmazonDynamoDBFullAccess policy
							1. Open the IAM console at https://console.aws.amazon.com/iam/.

							2. On the IAM console dashboard, choose Users, and then choose your IAM user from the list.

							3. On  the Summary page, choose Add permissions.

							**4. Choose 'Attach existing policies directly'.**

							5. From the list of policies, choose AmazonDynamoDBFullAccess, and then choose Next: Review.

							6. Choose Add permissions.

			Creating a New Table with Auto Scaling Enabled
					DynamoDB auto scaling requires the presence of a service linked role (AWSServiceRoleForApplicationAutoScaling_DynamoDBTable) that performs auto scaling actions on your behalf. 

					This role is created automatically for you. For more information, see Service-Linked Roles for Application Auto Scaling.
							https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-service-linked-roles.html

	Otherwise, simply ensure that Use default settings is checked, then select Create.
			Note that the default setting provisions 5 reads and 5 writes.

			When you create a table, you specify how much provisioned throughput capacity you want to reserve for reads and writes.
					DynamoDB will reserve the necessary resources to meet your throughput needs while ensuring consistent, low-latency performance. 

					One read capacity unit can read up to 8 KB per second and one write capacity unit can write up to 1 KB per second. You can change your provisioned throughput settings, increasing or decreasing capacity as needed.

					



	
























































