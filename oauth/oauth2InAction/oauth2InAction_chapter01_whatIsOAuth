	                                                                   |
Add 51 to the page to get the pdf location. A page references are in PDF pages.
*************************************************************
*************************************************************
The entire point of an authentication protocol is to know whether the user is present.
*************************************************************
*************************************************************
The client is the piece of software that accesses the protected resource on behalf of the resource owner.
*************************************************************
*************************************************************
*							    *
*							    *
*							    *
toc: 19
pg496 - 560
*************************************************************
**  Chapter 1 - What is Oauth 2.0 and why should you care? **
*************************************************************
1.1 What is OAuth 2.0?

OAuth 2.0 is a delegation protocol pg7

OAuth 2.0 is letting someone who controls a resource (resource owner) to 
	allow a software application (client) to access that resource on 
	their behalf without impersonating them.
		- There is the controller (photo storage) of the resource 
		  (photos)
		- There is the owner (person/user) of the resource
		- Software application (photo printing aka 'client') wants 
		  access to the resource
The application requests authorization from the owner of the resource and 
	receives tokens that it can use to access the resource. 
The token explicitly represents a delegated right of access to the resource 
	for the application. You can think of the OAuth token as a “valet 
	key” for the web. Valet keys limit the valet to accessing the 
	ignition and doors but not the trunk or glove box. 
More complex valet keys can limit the upper speed of the car and even shut 
	the car off if it travels more than a  set distance from its 
	starting point, sending an alert to the owner. In much the same way, 
	OAuth tokens can limit the client’s access to only the actions that 
	the resource owner has delegated.
Say that you have a cloud photostorage service and a photoprinting service 
	the and two services are run by different companies. Your account 
	with the storage service has no connection to your account with the 
	printing service. OAuth can solve this problem by delegating access 
	to your photos (resource).
You can do this without giving your password away to the photo 
	printer.
OAuth is defined by: 
		The OAuth 2.0 authorization framework enables a third-party 
			application to obtain limited access to an HTTP 
			service, either on behalf of a resource owner by 
			orchestrating an approval interaction between the 
			resource owner and the HTTP service, or by allowing 
			the third-party application to obtain access on its 
			own behalf.
Let’s unpack that a bit: as an 'authorization framework',  OAuth  is all 
	about getting the right of access from one component of a system to 
	another. In the OAuth world, a client application (photo printing) 
	wants to gain access to a protected resource (photos) on behalf of 
	a resource owner (usually an end user). These are the components 
	that we have so far:
		The 'resource owner' (user) has access to an API and can 
			delegate access to that API. The resource owner is 
			a person with access to a web browser.
		The 'protected resource' (photos) is the component that the 
			resource owner (user) has access to. For the most 
			part it’s a web API of some kind.
		The 'client' (photo priting service) is the piece of 
			software that accesses the protected resource 
			(photos) on behalf of the resource owner (user). If 
			you’re a web developer, the name “client” might make 
			you  think  this  is  the  web  browser,  but  
			that’s  not  how  the  term  is  used  here. In 
			OAuth, the client (photo printing service) is 
			whatever software consumes the API that makes up 
			the protected resource (photos). 
				Whenever you see “client” in this book, 
					we’re almost certainly talking about 
					this OAuth-specific definition.
We’ve got one goal in this whole setup: getting the client to access the 
	protected resource for the resource owner. 
In the printing example, storage site’s API is the resource and the printing 
	service is the client of that API. You, as the resource owner, need 
	to be able to delegate part of your authority to the printer so that 
	it can read your photos.
We’ll see how this problem could be solved imperfectly without OAuth, and then we’ll look at how OAuth can solve it in a better way. 

*************************************************************
*************************************************************
The entire point of an authentication protocol is to know whether the user is present.
*************************************************************
*************************************************************
1.2  The bad old days: credential sharing (and credential theft) pg11

One approach, popular in the enterprise space, is to 'copy the user’s credentials and replay them on another service'. In this case, the photo printer assumes that the user is using the same credentials as the storage site. The printer replays the user’s username and password, pretending to be the user.
		In this scenario, the user authenticates to the client using something agreed on by both the client and the protected resource. The client then replays  it  to  the  protected  resource, pretending to be the user.

		The protected resource acts as if the user had authenticated directly, which makes connection between  the  client and protected resource. 

		This approach requires that the user have the same credentials at the client application and the protected resource. If the printing service is offered by the same company that provided the storage service, this technique might work as the user would have the same account credentials on both services. 

		The client is impersonating the user, and the protected resource has no way to tell the difference between the resource owner and the impersonating client.

		But  what  if  the  two  services  occupied  different  security  domains,  a  likely  scenario  for our photo-printing example? We can’t copy the password, would-be credential thieves could stealing something by asking the user.

		This is an extremely dangerous practice, since the compromise of any client in use will lead to a full compromise of that user’s account across all systems. It exposes the user’s primary credentials to a potentially untrustworthy application, the client.
				Lightweight Directory Access Protocol (LDAP) authentication
						This  pattern  is  exactly  how  password-vault  authentication  technologies such as LDAP function. 

						When using LDAP for authentication, a client application collects credentials directly from the user and then replays these credentials to  the  LDAP  ser ver  to  see  whether  they’re  valid.

						The client system must have access to the plaintext password of the user during the transaction; other wise, it has no way of verifying it with the LDAP server.

						In a ver y real sense, this method is  a  form  of  man-in-the-middle  attack  on  the  user,  although  one  that’s  generally benevolent in nature.

		If the client application is ever compromised, the attacker gains access not only to the client but also to the protected resource, as well as any other service where the end user may have used the same password.

		The client application is 'impersonating' the resource owner, and the protected resource has no way of distinguishing the resource owner from a client. Consider that you don’t want the printing service to be 
		able to upload or delete photos from the storage service. 

Another common approach is to use a developer key issued to the client, which uses this to call the protected resource directly. In this approach, the developer key acts as a kind of universal key that allows the client to impersonate any user that it chooses, probably through an API parameter.
		This has the benefit of not exposing the user’s credentials to the client. But the client effectively has free rein over the data on the protected resource.

		Additionally, the damage done to the protected resource if the client’s credentials are stolen is potentially catastrophic, since all users of the storage service are affected by the breach whether they ever used the printer or not.

Another possible approach is to give users a special password that’s only for sharing with third-party services. Users don’t use this password to log in themselves, but paste it into applications that they want to work for them. 
		The usability of such a system is, on its own, not very good. This requires the user to generate, distribute, and manage these special credentials in addition to the primary passwords.

		There is also, generally speaking, no correlation between the client program and the credential itself. This makes it difficult to revoke access to a specific application. 

		What if we were able to have this kind of limited credential, issued separately for each client and each user combination, to be used at a protected resource?

What if there were a network based  protocol  that  allowed  the  generation  and  secure  distribution  of  these  limited  credentials across security boundaries in a way that’s both user-friendly and scalable to the internet as a whole? OAuth is a protocol designed to do exactly that.

1.3 Delegating access pg15

In OAuth, the end user (resource owner) delegates some part of their 
	authority to access the protected resource (photos) to the client 
	(photo printing service) application to act on their behalf.
To make that happen, OAuth introduces another component into the system: the 
	'authorization server'. The authorization server (AS) is trusted by 
	the protected resource (photos) to issue special-purpose security 
	credentials—called OAuth access tokens -— to clients (photo printing 
	service). 
		To acquire a token, the client (application / photo printing 
			service) first sends the resource owner (user) to 
			the authorization server in order to request that 
			the resource owner authorize this client.
	                                                                   |
		[client]--(can I authorize?)-->[resource owner]--(allow client access)-->[authorization server]

		The resource owner authenticates to the authorization server and is generally presented with a choice of whether to authorize the client making the request. 

		The client is able to ask for a subset of functionality, or scopes, which the resource owner may be able to further diminish.

		Once the authorization grant has been made, the client can then request an access token from the authorization server.

		This access token can be used at the protected resource to access the API, as granted by the resource owner.

		[client (application)] --> Requests authorization --> [resource owner (person)]
		[resource owner (person)] --> Grants authorization to client --> [authorization server] 
		[authorization server] >> [client (application)]
		[client (application)] --> Sends authorization grant --> [authorization server] 
		[authorization server] --> Sends access token to client --> [client (application)]
		[client (application)] --> Sends access token to resource server --> [protected resource]
		[protected resource] --> Sends requested resource --> [client (application)]

At no time in this process are the resource owner’s credentials exposed to the client. The resource owner authenticates to the authorization server separately from anything used to communicate with the client. Neither  does  the  client  have  a  high-powered developer key: the client is unable to access anything on its own and instead must be authorized by a valid resource owner.

Instead of requiring the user to generate tokens and paste them into 
	clients, the OAuth protocol facilitates this process and makes it 
	simple for the client to request a token and the user to authorize 
	the client.
		Clients can then manage the tokens, and users can manage the 
			client applications. There are several ways to get 
			an access token using OAuth.

	1.3.1 Beyond HTTP Basic and the password-sharing antipattern pg17

	Many of the more “traditional” approaches listed in the previous 
		section are examples of  the  password  antipattern,  in  
		which  a  shared  secret  (the  password)  directly  
		represents  the  party  in  question  (the  user).  
	A user in a browser is able to authenticate to a web page using a 
		username and password over a protocol known as HTTP Basic 
		Auth. There is also a slightly more secure version of this, 
		known as HTTP Digest Auth. Both assume the presence of a 
		user and require anusername and password presented to the 
		HTTP server. 
	Because HTTP is a stateless protocol, these credentials will be 
		presented on every single transaction. HTTP makes  no  
		distinction between  transactions where the user is present 
		(with  a  browser) and transactions with another piece of 
		software without an intermediary browser.
	This fundamental flexibility has been key to the success the HTTP 
		protocol. When HTTP started to be used for direct-access 
		APIs its existing security mechanisms were quickly adopted. 
		This has contributed to the misuse of continuously-presented 
		passwords for both APIs and user-facing pages. 
	Whereas browsers have cookies and other session-management at their 
		disposal, the types of HTTP clients that access a web API do 
		not.
	OAuth was designed from the outset as a protocol for use with APIs. 
		The main interaction is outside of the browser.
	It usually has an end user in a browser to start the process, and 
		indeed this is where the flexibility and power in the 
		delegation model comes from, but the final steps of 
		receiving the token and using it at a protected resource 
		lie outside the view of the user. 
	In fact, some of the key use cases of OAuth occur when the user is 
		no longer present at the client, yet the client is still 
		able to act on the user’s behalf. Using OAuth allows us to 
		move past the notions and assumptions of the HTTP Basic 
		protocol in a way that’s powerful, secure, and designed to 
		work with today’s API-based economy.

	1.3.2 Authorization delegation: why it matters and how it’s used pg18

	Fundamental to  the  power  of  OAuth  is  the  notion  of  delegation. Although  OAuth is often called an authorization protocol it is a delegation protocol. a subset of a user’s authorization is delegated, but OAuth itself doesn’t carry or convey the authorizations. 
	                                                                   |
	Instead, a  client  can  request  that  a  user  delegate  some  of  their authority to it. The user can then approve this request, and the client can then act on it with the results of that approval.
	                                                                   |
	The  distinction  between  a  delegation  and  an  authorization  protocol is important here because the authorizations being carried by the OAuth token are opaque to most of the system.  Only  the  protected  resource needs  to  know  the  authorization. 

	As long as it’s able to find out from the token and its presentation context (either by looking at the token directly or by using a service of some type to obtain this information), it can serve the API as required.

	1.3.3 User-driven security and user choice pg19 

	Since the  OAuth  delegation  process  involves  the  resource  owner, important security decisions can be driven by end user choice.

	Traditionally, security decisions, who can use a service, with which client software, and for what purpose, have been the purview of centralized authorities. OAuth allows these authorities to push some of that decision-making power into the hands of the users who will ultimately be using the software. 

	OAuth allows these authorities to push some of that decision-making power into the hands of the users who will ultimately be using the software. 

	OAuth systems often follow the principle of TOFU: Trust On First Use. Tthe first time a security decision needs to be made at runtime the user is  prompted. 
			This can be as simple as “Connect a new application?” The user with appropriate authority is allowed to make a security decision.

			The first time an authorization context is met, the system can be directed to trust the user’s decision for later processing: Trust On First Use. 

			The Trust On First Use (TOFU) method of managing security decisions is not required by OAuth implementations, but it’s especially common to find these two technologies together.

			The TOFU method strikes a balance between asking end users to make security decisions and the fatigue of asking them constantly. Without the “Trust” portion users would have no say in how delegations are made; without the “On First Use” portion users would quickly become numb to access requests.

			This kind of security fatigue breeds workarounds that are usually more insecure than the practice the security is trying to address.

	This approach also presents the user’s decision in terms of functionality, not security. This is an important distinction where decision makers are  asked ahead of time to demarcate what isn’t permissible.

	The user cares more about what they’re trying to accomplish instead of what they’re trying to prevent.

	Now this isn’t to say that the TOFU method must be used for all transactions or decisions. A three-layer listing mechanism offers powerful flexibility for security architects:
			The  whitelist determines  known-good  and  trusted  applications: Internal parties, known business partners, Customer organizations, Trust frameworks
					This decision can be provided apriori

			The blacklist determines known-bad applications or other negative  actors: Known bad parties, Attack sites
					This decision can be provided apriori

			In a traditional security model, the discussion would stop here, everything not on the whitelist is automatically on the blacklist by default.

			With the addition of the TOFU method, we can allow a graylist in the middle of these two, In which user-based runtime trust decisions can take precedence.
					By offering the graylist capability, a system can greatly expand the ways it can be used without sacrificing security.

*************************************************************
*************************************************************
The entire point of an authentication protocol is to know whether the user is present.
*************************************************************
*************************************************************
1.4  OAuth 2.0: the good, the bad, and the ugly pg20
	OAuth 2.0  is  very  good  at  capturing  a  user  delegation decisons, allowing  for multiple different parties to be involved in the security decision  process, most notably the end user at runtime. 

			One key assumption in OAuth 2.0 was that there would be more client than there would be authorization servers or protected resource servers. A single authorization server can protect multiple resource servers.
			
			An authorization server can have different classes of clients that are trusted at different levels, but we’ll cover that in more depth in chapter 12. Wherever possible, complexity is shifted away from clients and onto  servers.
	
	The client becomes the simplest piece of software in the system. Client developers no longer have to worry about handling sensitive  user credentials. 
			OAuth  tokens  provide  a  mechanism  that’s  only  slightly more complex than passwords but significantly more secure when used properly.

			A client needs to manage own client credentials and the user’s tokens, and the breach of a single client would be limited to the users of that client.

			Breaching the client doesn’t expose the resource owner’s credentials, since the client never sees them in the first place.

	The flip side is that authorization servers and protected resources are now responsible for more of the complexity and security.
			An authorization server, on the other hand, needs to manage and secure the credentials and tokens for all clients and all users on a system.

			Although this does make it more of a target for attack, it’s significantly easier to make a single authorization server highly secure than it is to make a thousand clients written by independent developers just as secure. 

	The extensibility and modularity of OAuth 2.0 is one of its greatest assets. It allows the protocol to be used in a wide variety of environments. 

	OAuth leaves many pieces optional, which can confuse developers who are trying to implement it between two systems. Even worse, some of the available options in OAuth can be taken in the wrong context  or  not  enforced  properly,  leading  to  insecure  implementations.
			These  kinds of vulnerabilities are discussed at length in the OAuth Threat Model Document.

	The fact that a system implements OAuth, and even implements it correctly according to the spec, doesn’t mean that this system is secure in practice.

1.5 What OAuth 2.0 isn’t pg22
	Even though it’s approaching ubiquity, there are many things that OAuth is not, and it’s important to understand these boundaries when understanding the protocol itself. 
			There has historically  been some confusion regarding what “counts” as  OAuth and what  does  not. 
			
			For the purposes of this book, we’re taking OAuth to mean the protocol  defined by the core OAuth specification:  which dictates how to 'use' this particular style of token.
	
	These two actions—how to get a token and how to use a token—are the fundamental parts of OAuth.
			There are a number of other technologies in the wider OAuth ecosystem that work together with the core of OAuth to provide greater functionality than what is available from OAuth itself.

			We contend that this ecosystem is evidence of a healthy protocol and shouldn’t be conflated with the protocol itself.

	OAuth isn’t defined outside of the HTTP protocol.
			Since OAuth 2.0 with bearer tokens provides no message signatures, it is not meant to be used outside of HTTPS (HTTP over  TLS).

			Sensitive secrets and information are passed over the wire, and OAuth requires a transport layer mechanism such as TLS to protect these secrets.
					A standard exists  for  presenting  OAuth  tokens  over  Simple  Authentication  and Security  Layer (SASL)–protected protocol

					There are new efforts to define OAuth over Constrained Application Protocol (CoAP)

					Future efforts could make parts of the OAuth process  usable  over  non-TLS  links  (such  as  some  discussed  in  chapter  15). 

			But even in these cases, there needs to be a clear mapping from the HTTPS transactions int other protocols and systems. 

	OAuth isn’t an authentication protocol
			It can be used to build one. However an OAuth transaction on its own tells you nothing about who the user is, or even if they’re there.
					Think of our photo-printing example: the photo printer doesn’t need to know who the user is, only that somebody said it was OK to download some photos.

			OAuth uses authentication in several places, particularly authentication of the resource owner and client software to the authorization server.
					This embedded authentication does not itself make OAuth an authentication protocol.

	OAuth doesn’t define a mechanism for user-to-user delegation
			Even though it is fundamentally about delegation of a user to a piece of software, oAuth assumes that the resource owner is the one that’s controlling the client.

			In order for the resource owner to authorize  a  different  user,  more  than  OAuth  is  needed. 

			This kind of delegation is not an uncommon use case, and the User Managed Access protocol (discussed in chapter 14) uses OAuth to create a system capable of user-to-user delegation.

	OAuth  doesn’t  define  authorization-processing  mechanisms
			OAuth provides a means to convey the fact that an authorization delegation has taken place, but it doesn’t define the contents of that authorization. 

			It is up to the service API definition to use OAuth’s components, such as scopes and tokens, to define what actions a given token is applicable to.

	OAuth doesn’t define a token format
			This is a departure  from  previous  security  protocols  such  as  WS-*, Security Assertion  Markup  Language (SAML), or Kerbero in which the client application needed to be able to parse and process the token.

			However, the token still needs to be understood by the authorization server that issues it and the protected resource that accepts it. 
					Desire for interoperability at this level has led to the development of the JSON Web Token (JWT) format and the Token Introspection protocol, discussed in chapter 11.

					The token itself remains opaque to the client, but now other parties can understand its format.

	OAuth 2.0 defines no cryptographic methods
			OAuth 2.0 protocol is built to allow the reuse of more general-purpose cryptographic mechanisms, which  helped lead to the development of the JSON Object Signing and Encryption (JOSE) suite of specifications.

			We’ll see more of the JOSE specifications in chapter 11 and apply them to a message-level cryptographic protocol using OAuth Proof of Possession (PoP) tokens in chapter 15.

	OAuth 2.0 is also not a single protocol
			The specification is split into multiple definitions and flows, each of which has its own set of use cases. 

			The core OAuth 2.0 specification has somewhat accurately been described as a security protocol generator, because it can be used to design the security architecture for many different use cases.

			These systems aren’t necessarily compatible with each other. The different applications of OAuth do allow for a large amount of code reuse between ver y different applications.
					Assume that there are two back end systems that need to talk to each other securely without referencing a particular end  user. 

					If the system uses the OAuth client credentials grant (discussed in chapter 6)
							The system can limit the lifetime and access rights of tokens on the wire.

							Also, developers can use existing OAuth libraries and frameworks for the client and protected resource.

					Since the protected resource is already set up to process requests protected by OAuth access token.

					When the protected resource wants to make its data available in a per-user delegated fashion, it can easily handle both kinds of access simultaneously. 

					By using separate scopes for the bulk transfer and the user-specific data, the resource can easily differentiate between these calls with minimal code changes.

			OAuth provides a solid basis that can be built on by other focused tools to create more comprehensive security architecture designs.

OAuth is a widely used security standard that enables secure access to protected resources in a fashion that's friendly to web APIs. 
		OAuth is about how to get a token and how to use a token

		OAuth is a delegation protocol that provides authorization across systems.

		OAuth replaces the password-sharing antipattern with a delegation protocol that’s simultaneously more secure and more usable.

		OAuth is focused on solving a small set of problems and solving them well, which makes it a suitable component within larger security systems.
































































