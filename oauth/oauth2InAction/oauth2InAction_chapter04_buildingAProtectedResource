*************************************************************
*************************************************************
The entire point of an authentication protocol is to know whether the user is present.
*************************************************************
*************************************************************
The client is the piece of software that accesses the protected resource on behalf of the resource owner.
*************************************************************
*************************************************************
*							    *
*							    *
*							    *
pg 86 - 101
*************************************************************
** Chapter 3 - Building a simple OAuth Protected Resource ***
*************************************************************
In this chapter, we’ll be building a simple resource server that our client can call and our authorization server can protect.

All that the resource server needs to do is parse the OAuth token out of the incoming HTTP request, validate that token, and determine what kinds of requests the token is good for.
		Our resource server will be a simple data store that serves JSON objects to HTTP GET and POST requests on several different URLs, depending on the exercise.

Although the protected resource and authorization server are conceptually separate components in the OAuth structure, many OAuth implementations colocate the resource server with the authorization server.
		Wwe’ll be running the protected resource in a separate process on the same machine, but giving it access to the same database used by the authorization server.

4.1 Parsing the OAuth token from the HTTP request

OAuth specification tells us that the Bearer keyword is not case sensitive. Express.js automatically lowercases all incoming HTTP headers. 

<please see the code in https://github.com/syeed-ode/oauth/blob/master/protectedResource/parsingTokens/protectedResource.js for more details>

4.2 Validating the token against our data store

Our authorization server uses a NoSQL database stored in a file on disk with a simple Node.js module to allow access.
		 To look at the contents of the database live while the program is in operation, monitor the 'database.nosql' file in the exercise directory.

		 Note that editing this file by hand is dangerous while the system is running.  Resetting the database is as simple as deleting the database.nosql file and restarting the programs.

		 This file isn’t created until the authorization server stores a token in it the first time, and its contents are reset every time the authorization server is restarted.

We’ll perform a simple lookup in our database to find the access token based on its incoming value. Our server stores each access token and refresh token as a separate element in the database, so we just have to use our database’s search capabilities to find the right one.
		// The first function passed in checks the value of the stored access tokens against the input token that we pulled off the wire. 
		nosql.one(function(token) {
			//  If it finds a match, it returns the token and the searching algorithm stops.
			if (token.access_token == inToken) {
				 return token;
			}
		// The second function is called when either a match is found or the database is exhausted, whichever comes first. If we do find a token in the store, it will be passed in the 'token' argument.
		}, function(err, token) {
			// If we are unable to find a token with the input value, this argument will be null. 
			if (token) {
				 console.log("We found a matching token: %s", inToken);
			} else {
				 console.log('No matching token was found.');
			}
			// Whatever we find, we attach it to the access_token member of the req object and call the next function.
			req.access_token = token;
			// The 'req' object is automatically passed to the next part of the process handler.
			next();
			return;
		});

There’s a standardized web protocol called Token Introspection that the authorization server can offer, allowing the resource server to check the token’s state at runtime.
		This lets the resource server treat the token itself as opaque, just like the client does, at the expense of more network traffic.

		Also tokens can contain information that the protected resource can parse and understand directly.
				One such structure is a JSON Web Token, or JWT, which carries a set of claims in a cryptographically protected JSON object.

				We’ll cover both of these techniques in chapter 11.

Now we need to wire in our protected resource helper function into our service.  

With Express.js, we have two main options: 1) wire it to every request, or 2) wire it specifically to the requests that we want to check for OAuth tokens.
		To have this processing done on every request, we set up a new listener and hook up our function. 
				This needs to be connected before any other functions in our router since they’re processed in the order that they’re added in the code. 
						app.all('*', getAccessToken);

		Alternatively, we can insert our new function into an existing handler setup so that our function is called first.
				app.post("/resource", function(req, res){
				});

				All we need to do to have our token processor function called first is to add our function to the route before the handler definition.
						app.post("/resource", getAccessToken, function(req, res){
						});

				By the time the handler is called, the request object will have an 'access_token' member attached to it.

				If the token was found, this will contain the token object from the database. If the token was not found, this will contain null. We can branch our code accordingly.

4.3 Serving content based on the token

Many APIs are designed such that different actions on the API require different access rights.
		Some APIs are designed to give different answers depending on whose authority the call was made, or give a subset of information based on different access rights. 

		We’ve already included the 'getAccessToken' utility function from the last exercise, and we’ve wired it up to all of the HTTP handlers.
				That function only extracts the access token and doesn’t make processing decisions based on its absence or presence.

				We’ve also wired up a simple utility function called 'requireAccessToken' that handles returning the error if the token isn’t present, but otherwise passes control to the final handler for further processing.



	4.3.1 Different scopes for different actions

	This is also a common way to have a single access token be applicable across multiple resource servers associated with a single authorization server.

	4.3.2 Different scopes for different data results

	Different kinds of information can be returned from the same handler depending on which scopes are present in the incoming token.

	This is usefule when you want to be able to give access to subsets of the information without the client needing to call different API endpoints for each type of information.

	Instead of multiple separate handlers (one for each type of produce), we have a single handler for all produce calls. 











































