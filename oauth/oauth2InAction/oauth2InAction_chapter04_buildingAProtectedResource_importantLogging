The source code for this flow is in:
	oauth/protectedResource/importantLogging_makingAuthDecisionBasedUponTokens

1) Click get access token. 
	Client log says:
			1) Calls client's /authorize enpoint
				Entering /authorize endpoint from client's index.html anchor href=/authorize.

					a) Set the grant_type to authorization_code.  Note the client could use other methods as well. The client has a choice of authorization code, user credentials, or refresh token.
							Now setting the response_type to code {authorizedGrantTypes} [authorizeUrl.query.response_type = 'code';]. This is the equivalent of springs constructor 'public AuthorizationCodeResourceDetails() {this.setGrantType("authorization_code");}'. 

							It informs the authorizationServer that this response is to an authorizedGrantTypes of authorization_code that the client may call the authorizationServer once more to receive a token for it.

					b) client stores a list of scopes it believes it has access for. (The user has to verify these scopes in future steps.)
							Also sending authorization server a list of scopes the client want to have access to.

			[client -- auth_code --> authorization server]
			2) Client gets an authorization code by calling authorazation server's /authorize endpoint {AuthorizationEndpoint: /oauth/authorize} via redirect to get authorization code. A authorization code is obtained by the OAuth client by directing the end-user to an authorization page where the user can enter her credentials.
					redirect to http://localhost:9001/authorize?response_type=code&scope=read%20write%20delete&client_id=oauth-client-1&redirect_uri=http%3A%2F%2Flocalhost%3A9000%2Fcallback&state=4VjOhZDZZQmGmBcao82YJ33I47oPYsSw

					Using client's front channel communication to redirect to the authorizationServers redirect url http://localhost:9001/authorize?response_type=code&scope=read%20write%20delete&client_id=oauth-client-1&redirect_uri=http%3A%2F%2Flocalhost%3A9000%2Fcallback&state=4VjOhZDZZQmGmBcao82YJ33I47oPYsSw. 

					Front channel comms means that browser is not involved in the conversation at all. Just redirect the URI

	AuthorizationServer log says: 
			[client -- auth_code --> authorization server]
			3) Processing authorization code request from client and verifies the clients allowed scope
					Entering /authorize endpoint from client's /authorize endpoint. We were redirected here using front channel communications.
					
					Successfully processed clientId and assured the redirect URL exists. Now checking the scope the client requested in the original 'http://localhost:9001/authorize' redirect this populated in the request query parameters'rscope = req.query.scope' and the scopes we permit for this client 'client.scope'
					
					Calling authorizationServers's approve.html, sending it a client: {"client_id":"oauth-client-1","client_secret":"oauth-client-secret-1","redirect_uris":["http://localhost:9000/callback"],"scope":"read write delete"}
					this was stringified 'JSON.stringify(client)',a reqid: ACag0yvs, and a the requested scope: [read,write,delete]

2) Click to verify the allowed scopes
	AuthorizationServer log says:
			4) Check the scopes against {ClientDetailsServiceConfigurer} for the token and call token endpoint
					Entered in /approve POST api called from authorizationServers approve.html: it was a form,action="/approve",method="POST" with an input type of checkbox and input type of submit.

					Checking the request list for this reqid. Then we will check the response_type to see if it's equal to code (i.e. authorization_code). If it is it constructs the allowed scopes for the client. The client will use these scopes in the get token call.

	Client log says:
					Entered in client with /callback endpoint just called. State value matches: expected 4VjOhZDZZQmGmBcao82YJ33I47oPYsSw got 4VjOhZDZZQmGmBcao82YJ33I47oPYsSw

			5) Client now requests a token with the scopes allowed by authorizationServer note the grant type {authorizedGrantTypes} is still authorization_code.
					Requesting access token for code V1KAlxUj

	AuthorizationServer log says:
			6) Authorization server sends tokens
					Issuing access token N8GIBYnT3xnNOQEa7bneCokrtPNoKnsc
					and refresh token DPy0G3x0DAcSgPFuHVP0vbWbxPwQcJ0m
					with scope N8GIBYnT3xnNOQEa7bneCokrtPNoKnsc [ 'read', 'write', 'delete' ]
					Issued tokens for code V1KAlxUj

					Got access token: N8GIBYnT3xnNOQEa7bneCokrtPNoKnsc
					Got refresh token: DPy0G3x0DAcSgPFuHVP0vbWbxPwQcJ0m
					Got scope: read write delete
					Now calling client's index.html with token: N8GIBYnT3xnNOQEa7bneCokrtPNoKnsc, and scope: [read write delete]










































