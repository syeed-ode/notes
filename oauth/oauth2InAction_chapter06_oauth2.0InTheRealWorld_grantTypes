*************************************************************
*************************************************************
The entire point of an authentication protocol is to know whether the user is present.
*************************************************************
*************************************************************
The client is the piece of software that accesses the protected resource on behalf of the resource owner.
*************************************************************
*************************************************************
Spring references are included in the {} marker
*************************************************************
*************************************************************
*							    *
*							    *
*							    *
pg 120 - 145
*************************************************************
***         Chapter 6 - 0Auth 2.0 In the Real World       ***
*************************************************************
6.1 Authorization grant types
		When OAuth 2.0 was being developed, the working group made a distinct decision to treat the core protocol as a framework instead of a single protocol. One of the key areas that OAuth 2.0 can vary is that of the 'authorization grant', colloquially known as 'the OAuth flow'. 
				The authorization code grant type is just one of several different ways that an OAuth client can get a token from an authorization server. 

		We’ll be looking at the other primary options here in this section.

	6.1.1 Implicit grant type - used when client is inside browser (JS application) {implicitGrantService}
		1. Grant Type is equal to token instead of 'authorization_code'
		2. Client calls authoriztion endpoint only and gets 'token' 
		3. Resource owner still authenticates with autorization server
			But what if we were to put the client inside the browser (see figure 6.1)?

			One key aspect in the authorization code flow is that it keeps information separate between different components. 
					This way, the browser doesn’t learn things that only the client should know about, and the client doesn’t get to see the state of the browser, and so on.

			But what if we were to put the client inside the browser (see figure 6.1)? This is what happens with a JavaScript application running completely inside the browser. 
					In this case, there is no real benefit in passing the authorization code through the browser to the client, only to have the client exchange that for a token because the extra layer of secrets isn’t protected against anyone involved.

			Implicit grant type uses only the front channel since the client is inside the browser.

			The implicit grant type does away with this extra secret and its attendant round trip by returning the token directly from the authorization endpoint. The implicit grant type therefore uses only the front channel (covered in chapter 2) to communicate with the authorization server.
					This flow is useful for JavaScript applications within websites that perform authorized session sharing across security domains.

			The implicit grant has severe limitations that need to be considered.
					First, there is no  way for a client secret, since the secret will be made available to the browser itself. This flow uses only the authorization endpoint and not the token endpoint. The client is never expected to authenticate at the authorization endpoint.
							The lack of any means of authenticating the client does impact the security profile of the grant type and it should be approached with caution.

					Additionally, the implicit flow can’t be used to get a refresh token. Since in-browser applications are by nature short lived (lasting only the session length). The usefulness of a refresh token would be very limited.

			Here is how it works:
					The client sends its request to the authorization server’s authorization endpoint this time the 'response_type' parameter is set to 'token' instead of 'code'. 
							This signals the authorization server to generate a token immediately instead of generating an authorization code to be traded in for a token.
									HTTP/1.1 302 Moved Temporarily
									Location: http://localhost:9001/authorize?response_type=token&scope=foo&client_id=oauth-client-1&redirect_uri=http%3A%2F%2Flocalhost%3A9000%2Fcallback&state=Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1
									Vary: Accept
									Content-Type: text/html; charset=utf-8
									Content-Length: 444
									Date: Fri, 31 Jul 2015 20:50:19 GMT

							The client can do this by using a full-page redirect or by using an inline frame (iframe) inside the page itself. Either way, the browser makes a request to the authorization server’s authorization endpoint.

					The resource owner authenticates themselves and authorizes the client in the same manner as the authorization code flow. However, this time the authorization server generates the token immediately and returns it by attaching it to the URI fragment of the response from the authorization endpoint.
							Remember, since this is the front channel, the response to the client comes in the form of an HTTP redirect back to the client’s redirect URI.
									GET /callback#access_token=987tghjkiu6trfghjuytrghj&token_type=Bearer
									HTTP/1.1
									Host: localhost:9000
									User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:39.0) Gecko/20100101 Firefox/39.0
									Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
									Referer: http://localhost:9001/authorize?response_type=code&scope=foo&client_id=oauth-client-1&redirect_uri=http%3A%2F%2Flocalhost%3A9000%2Fcallback&state=Lwt50DDQKUB8U7jtfLQCVGDL9cnmwHH1

							The fragment portion of the URI isn’t usually sent back to the server, which means that the token value itself is available only inside the browser. Note, however, that this behavior does vary depending on the browser implementation and version.

	6.1.2 Client credentials grant type - no resource owner or resource owner is the client software {authenticationManager?}
		1. Meant for backend systems accessing services directly
		2. There is usually no resource owner in the picture
		3. Client request token directly calling the token endpoint
			a. grant_type = 'client_credentials'
			What if there is no explicit resource owner, or the resource owner is indistinguishable from the client software itself? 
					In this situation there are back-end systems that need to communicate directly with each other and not necessarily on behalf of any one particular user.

					With no user to delegate the authorization to the client, can we even do OAuth (see figure 6.2)? We can, by making use of the client credentials grant type that was added to OAuth 2.0 for this case.
							In the implicit flow, the client is pushed up into the browser and therefore into the front channel.

							In this flow (client credentials), the resource owner is pushed down into the client and the user agent disappears from the picture.
									As a consequence, this flow makes exclusive use of the back channel.

									The client acts on its own behalf (as its own resource owner) to get the access token from the token endpoint.

					Figure 6.2: Client credentials grant type. Client trades its own credentials for a token, uses only the back channel since the client is acting on its own behalf.

			Here's how it works:
					The client requests a token from the token endpoint as it would with the authorization code grant, except that this time it uses the 'client_credentials' value for the 'grant_type' parameter and doesn’t have an authorization code or other temporary credential to trade for the token.

					The client authenticates itself directly, and the authorization server issues an appropriate access token.
							The client can also request specific scopes inside this call using the scope parameter.  This is like the scope parameter used at the authorization endpoint by the authorization code and implicit flows.
									POST /token
									Host: localhost:9001
									Accept: application/json
									Content-type: application/x-www-form-encoded
									Authorization: Basic b2F1dGgtY2xpZW50LTE6b2F1dGgtY2xpZW50LXNlY3JldC0x

									grant_type=client_credentials&scope=foo%20bar

					The response from the authorization server is a normal OAuth token endpoint response: a JSON object containing the token information.

					The client credentials flow does not issue a refresh token because the client is assumed to be in the position of being able to request a new token for itself at any time without involving a separate resource owner, which renders the refresh token unnecessary in this context.

			Scopes and grant types
					The client credentials grant type doesn’t have any direct user interaction. It’s really meant for trusted back-end systems accessing services directly. It's a good idea for protected resources to differentiate between interactive and noninteractive clients when fulfilling requests.

					Use different scopes for both classes of clients, managing them as part of the client’s registration with the authorization server.

	6.1.3 Resource owner credentials grant type - resource owner username/password gets token for client {userDetailsService}
			If the resource owner has a plain username and password at the authorization server.

			Use the resource owner credentials grant type, also known as the password flow. 
					The resource owner interacts directly with the client and never with the authorization server itself. 

			The resource owner {usersDetailsService} grant type uses the token endpoint exclusively, remaining confined to the back channel. In the resource owner credentials grant type. Client trades username and password for an OAuth token over the back channel.
					This is a bad idea. This is the password antipattern, in which a shared secret (the passowrd) directly represents the part in question (the user).
							This is also called the HTTP Basic and the password-sharing antipattern (from chapter 1). When HTTP started to be used for direct-access APIs its existing security mechanisms were quickly adopted. This has contributed to the misuse of continuously-presented passwords for both APIs and user-facing pages.

							Whereas browsers have cookies and other session-management at their disposal, the types of HTTP clients that access a web API do not. 

							OAuth was designed from the outset as a protocol for use with APIs. The main interaction is outside of the browser. 
									It usaually has an end user in a browser to start the process. But the final steps of receiving the token and using it at a protected resource lie outside the view of the user.

			This grant type, which is included in the core OAuth specification, is based on the “ask for the keys” antipattern.
					The resource owner’s credentials are exposed in plain text to the client, which could cache them or replay them whenever it sees fit. 

					The credentials are presented in plain text (though over a TLS encrypted connection) to the authorization server, which then needs to verify them, leaving another potential attack surface. 

					Many of the most effective and secure authentication technologies are designed to prevent the kind of credential replay that this grant type depends on. This effectively limits the authentication to a plain username and password or its analogs.

					This approach trains users to give their password to any application that asks for it. Instead, we should be training users to give their passwords only to a core set of trusted applications, such as the authorization server.

					Why, then, would OAuth codify such bad practice? There aren’t always other viable options. 
							This grant type is intended for clients that would normally be prompting for the resource owner’s username and password anyway, and then replaying those credentials to every protected resource.

							This grant type, then, can act as a stepping-stone toward a more modern security architecture that uses OAuth’s other, more secure grant types. It helps because:
									1) The protected resource no longer needs to know or ever see the user’s password. It can deal only with OAuth tokens. 
											This limits the exposure of the user’s credentials across the network and limits the number of components that ever see them.
									2) A client application no longer needs to store the passwords and transmit them to the resource servers.
											The client trades them for an access token
									3) The user experience is unchanged from before but the security profile is greatly improved over the alternative.
											Although using something like the authorization code grant type is greatly preferable, using this flow is sometimes better than replaying the user’s password to the protected resource on every request.

			Here's how it works:
					The client collect’s the resource owner’s username and password and replays that at the authorization server.
							POST /token
							Host: localhost:9001
							Accept: application/json
							Content-type: application/x-www-form-encoded
							Authorization: Basic b2F1dGgtY2xpZW50LTE6b2F1dGgtY2xpZW50LXNlY3JldC0x

							grant_type=password&scope=foo%20bar&username=alice&password=secret

					The authorization server reads the username and password and compares it with its local user store. If they match, the authorization server issues a token for that resource owner.
							If you think this looks a lot like a man-in-the-middle attack, you’re not far off. You know that you’re not supposed to do this, and why, but we’re going to work through how to build it so that you know what not to build in the future, if you can avoid it. Hopefully you’ll also be able to see some of the problems inherent in using this grant type by watching how the data is put together.

					Since this is a back-channel flow, we’re going to be working on the token endpoint once again.

	6.1.4 Assertion grant types - {tokenGranter}
			In the assertion grant types, the client is given a structured and cryptographically protected item called an 'assertion' to give to the authorization server in exchange for a token.

			You can think of an assertion as something like a certified document such as a diploma or license. You can trust the document’s contents to be true as long as you trust the certifying authority’s ability to make those statements truthfully.
					
			Figure 6.5: Client trades a cryptographically protected element (assertion) for a token

			Two formats are standardized so far: one using Security Assertion Markup Language (SAML) [https://tools.ietf.org/html/rfc7522], and another using JSON Web Token (JWT) [https://tools.ietf.org/html/rfc7523] (which we’ll cover in chapter 11).

			This grant type uses the back channel exclusively, and much like the client credentials flow there may not be an explicit resource owner involved. 
					Unlike the client credentials flow, the rights associated with the resulting token are determined by the assertion being presented and not solely by the client itself.
					
					Since the assertion generally comes from a third party external to the client, the client can remain unaware of the nature of the assertion itself.

			Here's how it works:
					Like other back-channel flows, the client makes an HTTP POST to the authorization server’s token endpoint. The client authenticates itself as usual and includes the assertion as a parameter.
							The means by which the client can get this assertion vary wildly, and are considered out of scope by many of the associated protocols.
									The client could be handed the assertion by a user, or by a configuration system, or through another non-OAuth protocol.

							In the end, as with an access token, it doesn’t matter how the client got the assertion as long as it’s able to present the assertion to the authorization server.

					 In this example, the client is presenting a JWT assertion, which is reflected in the value of the grant_type parameter.
							POST /token HTTP/1.1
							Host: as.example.com
							Content-Type: application/x-www-form-urlencoded
							Authorization: Basic b2F1dGgtY2xpZW50LTE6b2F1dGgtY2xpZW50LXNlY3JldC0x

							grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&assertion=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6InJzYS0xIn0.eyJpc3MiOiJodHRwOi8vdHJ1c3QuZXhhbXBsZS5uZXQvIiwic3ViIjoib2F1dGgtY2xpZW50LTEiLCJzY29wZSI6ImZvbyBiYXIgYmF6IiwiYXVkIjoiaHR0cDovL2F1dGhzZXJ2ZXIuZXhhbXBsZS5uZXQvdG9rZW4iLCJpYXQiOjE0NjU1ODI5NTYsImV4cCI6MTQ2NTczMzI1NiwianRpIjoiWDQ1cDM1SWZPckRZTmxXOG9BQ29Xb1djMDQ3V2J3djIifQ.HGCeZh79Va-7meazxJEtm07ZyptdLDu_Ocfw82F1zAT2p6Np6Ia_vEZTKzGhI3HdqXsUG3uDILBv337VNweWYE7F9ThNgDVD90UYGzZN5VlLf9bzjnB2CDjUWXBhgepSyaSfKHQhfyjoLnb2uHg2BUb5YDNYk5oqaBT_tyN7k_PSopt1XZyYIAf6-5VTweEcUjdpwrUUXGZ0fla8s6RIFNosqt5e6j0CsZ7Eb_zYEhfWXPo0NbRXUIG3KN6DCA-ES6D1TW0Dm2UuJLb-LfzCWsA1W_sZZz6jxbclnP6c6Pf8upBQIC9EvXqCseoPAykyR48KeW8tcd5ki3_tPtI7vA

					The body of this example assertion translates to the following:
							{
								"iss": "http://trust.example.net/",
								"sub": "oauth-client-1",
								"scope": "foo bar baz",
								"aud": "http://authserver.example.net/token",
								"iat": 1465582956,
								"exp": 1465733256,
								"jti": "X45p35IfOrDYNlW8oACoWoWc047Wbwv2"
							}

					The authorization server parsers the assertion, checks its cryptographic protection, and processes its contents to determine what kind of token to generate.
							This assertion can represent any number of different things, such as a resource owner’s identity or a set of allowed scopes.

							The authorization server will generally have a policy that determines the parties that it will accept assertions from and rules for what those assertions mean.

					In the end, it generates an access token as with any other response from the token endpoint. The client can then take this token and use it at the protected resource in the normal fashion.

			Implementation of this grant type is similar to other back-channel-only flows, wherein the client presents information to the token endpoint and the authorization server issues a token directly.

			Generating and processing assertions in a secure manner is an advanced topic worthy of its own set of books, and implementing the assertions flow is left as an exercise to the reader.

	6.1.5 Choosing the appropriate grant type
			Is your client acting on behalf of a particular resource owner? And do you have the ability to send that user to a webpage inside their web browser?
					Yes:
							Use one of the redirect-based flows: authorization code or implicit. Which one? That depends on the client.

							Is your client completely inside a web browser? (This doesn’t include applications that execute on a server and whose user interface is accessed through a web browser, only applications that live and die entirely within the browser itself.)
									Yes:
											Use the implicit flow.

									No:
											Use the authorization_code flow. (app is served from a web server, or runs on the users computer)

			Is your client a native application?
					Yes:
							Use authorization code

			Is your client acting on its own behalf?
				i.e.: Accessing APIs that don't map to a single user, such as bulk data transferes.
					Yes:
							Use client credentials

			Is your client working under the direction of an authoritative third party?
					Yes:
							Use assertion

6.2 Client Deployments - web applications, in-browser applications, native applications
OAuth clients come in many different forms and styles, but they can be broadly categorized into one of three categories: web applications, in-browser applications, and native applications. Each of these has its own strengths and weaknesses, and we’ll cover them in turn.

	6.2.1 Web applications
			These are applications that execute on a remote server and are accessed through a web browser.




















































































