	                                                                   |

This is how you find your external IP using the dig command

                    				[DIG COMMAND FOR FINDING EX IP]
          	     (find external ip using idg)#: dig +short myip.opendns.com @resolver1.opendns.com

This information was gather from reading Unix and Linux System Administration Handbook, 4th Edition 
	by O'Reilly, Chapter 17: DNS: The Domain Name System.  It a collection of notes, broken down 
	by section.
*
*
*
*
****    Section 17.2 - How DNS Works    ****
Delegation
	Each domain can delegate authority for its subdomains to other servers.
	
	All name servers read the identities of the root servers from a local config file or have 
		them built into the code.  
	The root servers know the name servers for com, net, edut, fi, de and other TLD.  Farther 
		down the chain, edu knows about colorado.edu, berkeley.edu, and so.
*
*
*
*
****    Section 17.4 - Name Severs    ****
pg. 557
Name servers peform the following chores:
	* It answers questions about your sites hostnames and IP addresses
	* It asks about local and remote hosts for your users
	* It caches answers to these queries so it can answer faster next 
	  time
	* It transfers data between your nameservers to keep them synchronized
A zone is a group of resource records located at the same place in the dns 
	name space (i.e. domain or subdoman). The data for DNS domain usually 
	includes two zones: 1) translating  hostnames to IP address, called 
	forwarding zones, the other 2) for translating IP addresses back to 
	hostnames call reverse zones.   
Authoritative (root servers and TLD servers, i.e., nonrecursive) (are 
	the official representatives of a zone) and nonauthoritative 
	(recursive servers, which caches data from previous queries) query 
	answers describe a name servers source of data (and the completeness 
	of the data handed out).  An authoritative answer from a name server 
	is “guaranteed’ to be accurate.  Nonauthoritative data answers may 
	come from a cache and may not know if the data is still valid.  
	Answers from primary and secondary name servers are authoritative 
	for their own zones, but not for information they may have cached. 
Recursive server returns only real answers and error messages.  It follows 
	referrals itself, relieving clients of this responsibility.
For security reasons, an organization’s externally accessible name servers 
	should always be  nonrecursive. **Any local name server listed in a 
	client’s *resolv.conf* file must be  recursive.**
[DNS servers also implement negative caching.  That is, they remember when a 
	query fails and do not repeat that query until the negative caching 
	TTL value has expired.  Negative caching saves answers of the 
	following types:
		* No host or domain matches the named queried.
		* The type of data requested does not exist for this host.
		* The server to ask is not responding.
		* The server to ask is unreachable because of network 
		  problems.
	BIND caches the first two types of negative data; Unbound caches all 
		four.  Each implementation allows the negative cache times 
		to be configured.]
*
*
*
*
****    Section 17.5 - The DNS Namespace    ****
Name servers are associated with zones, not domains. If the artist.com 
	domain were further subdivided into the subdomains engineering, 
	marking, and booklet, then the domain atrust.com would contain 
	four zones: the original atrust.com, plus engineering.atrust.com, 
	marketing.atrust.com, and booklab.atrust.com. The atrust.com zone 
	contains all the hosts in atrust.com except those in engineering, 
	marketing and booklab. 
The difference between a subdomains and hosts is a subdomains have a name 
	server (NS) records associated with them. 
Parent domains should check to be sure that a child domain's name servers 
	are up and running before  permforming the delegation.  If the 
	servers are not working a lame delegation results.
There are two types of top-level domains (TLDs): country code domains 
	(ccTLDs) and generic top level domains (gTLDs). 
Registering a second-level domain name
	To obtain a second-level domain, you must apply to a registrar for 
		the appropriate TLD. You must 1) choose a name that has not 
			been taken, 2) have (technical/admin) contact people, 
			and 3) have two hosts that will be names servers.
	Creating a subdomain is similar creating a second-level domain, 
		except the central authority is now local (within your 
		organization). The steps are 1) choose a unique name in the 
		local context, 2) have two name servers, 3) coordinate with 
		the administrator for the parent domain.
	Parent domains sould check to be sure that a child domain's name 
		servers are up and running before performing the delegation. 
		Delegation is where the child reads the authority of the 
		root servers.
*
*
*
*
****    Section 17.6 - Designing Your DNS Environment    ****
	* Managing the namespace hierarchy: subdomains, multiple levels, 
	  etc.
	* Serving the authoritative data about your site to the outside 
	  world
	* Providing name lookups for your users

Namespace management - Managing the namespace hierarchy: subdomains, multiple levels, etc.
	Make sure your firewall doesn't block subdomains if they 
		require the outside world to access them

Authoritative servers - Serving the authoritative data about your site to the outside world
	The DNS specification require at least two authoritative servers for 
		each domain. Primary (an official representative of a zone) 
		and secondary (copies data from primary) servers are 
		authoritative. 
	Caching and stub servers are not authorative. Caching servers caches 
		data from previous queries; usually have no local zones. 
		Stub servers are like a secondary but copies only name server 
		data (not host data).
	Authoritative servers keep their data synchronized by using zone 
		transfers. You can usese TSIG (transaction signatures) keys 
		to authenticate and control the zone transfers from your 
		primary server to your secondary servers.
	"Split-DNS" may be preferred. This is when an authoritative query 
		response is different depending upon who is asking.  Queries 
		from inside the network get more information than the queires 
		outside the network. This is called a view. The Bind 
		configuration file configures the view. External folks see 
		one view, internal folks see another.
Caching servers - Providing name lookups for your users
	Recursive caching servers answer local users questions about sites 
		on the internet.  Each computer at your site should have 
		ready access to a local caching server (configured in 
		/etc/resolv.conf).
	If the caching server dies, the network essentiall stops working for 
		all the users that were primary clients of that server.  
		This is why it's good to have more than one name server 
		listed in /etc/resolv.conf.
	                                                                   |
Hardware requirements - Providing name lookups for your users
	CPU is probably the least critical but it will become more critical as DNSSEC is fully 
		deployed.
	Recursive servers need enough memeory to cache all the answers your users demand.  It takes a week 
		or two to converge on a stable size at which old cache records are expiring at the rate at 
		about the same rate that new ones are being inserted.
	Authoritative servers need enough memory to store all the data for which they are authoritatve.  Most 
		sites can handle this but servers for TLD and DNS hosting sites may need either huge memories 
		or special software that facilitates storing part of the data on disk. 

DomainKeys Identify Mail (DKIM)
	Each originating email server signs the email with a private key.

Author Domain Signing Practice (ADSP)
	Allows a site to say whether it signs all, part or none of the outgoing email for each DNS zone.
	
Sender Policy Framework 

DNSSEC
	This standard adds authentication data to the DNS database and its servers. It uses public key 
		cryptography to verify the source and integrety of DNS data and uses DNS to distribute data 
		as well as host data.

DNSSEC Lookaside Validation (DLV)

Internet System Consortium (ISC)  
*
*
*
*
****    Section 17.7 - Limitations of 512 byte packets    ****
The section in the books is entitled, "what's New in DNS." But, I wanted to answer the following question: "Explain the significance for DNS of the 512-byte limit on UDP packets. What are the potential problems, are what are the workarounds that address them?"

SPF/TXT Limitation: The Sender Policy Framework and TXT records have a text string limitation of 255 bytes, so characters strings longer than that have to have multiple quoted strings.  The total length is limited to 450 bytes.  This is so that query responses can fit within the 512 UPD packet limiation.
*
*
*
*
****    Section 17.8 - The DNS Database    ****
*************************************************************
*							    *
*							    *
*							    *
****    Section 17.8 - The DNS Database [pg574 - 597]   *****
The zone's DNS database is a set of text files maintained on the zone's primary servers. They are 
	sometimes refered to as zone files. They contain two types of entries: parser commands and 
	resource records.
A zone is a group of resource records located at the same place in the dns name space. The data for DNS 
	domain usually usually includes two zones: 1) translating hostnames to IP address, called 
	forwarding zones, the other for translating IP addresses back to hostnames call reverse zones.   

Commands in the zone files
	Commands either influence the way the parser interprets seqbsequent records or they expand into 
		records themselves. 
	Three commands are standard in DNS and the fourth, $GENERATE, is only found in BIND. They are:
		$ORIGIN <domain name>
		$INCLUE <filename> <origin>
		$TTL <default-ttl>
	Ths origin defaults to the domain name specired in the name servers configuration file. 
		However you can set or change it using the $ORIGIN directive. Using the relative names 
		instad of the FQDN saves a lot of time.
	Many sites use $INCLUDE to keey the cryptographic keys in a file with restricted permission.  
		This is also use to modulize the domain. If you use the <origin> option, it overwrites 
		the current $ORIGIN directive. So you need to reset it, either at the bottom of the 
		<filename> or after the $INCLUDE statement.
	The $TTL directive sets the ttl for the records that follow it. (So, it should be at the top.) 
		It defaults to 1 day. 

Resource records
	Resource records are text files for **each host** on your domain. The file includes the host 
		name, the type of record, and some data values. The name field can be ommited if the 
		value for name is the same as the line above it.
	Resource records are the lingua franca of DNS and are independent of configuration files that 
		control DNS operations.  This is the information the nonauthoritative caching servers 
		cache about a domain or host.
	Each site maintians one or more pieces of the distrubuted database that make up the DNS system. 
		Your piece of the database consist of text files that contains records for each of your 
		hosts. These are known as "resource records". 
	Each zone has a set of resource records associated with it.  
		[<name>] [<ttl>] [<class>] <type> data
	<name> 	identifies the entity that the entry describes (usually a host or domain). A name can be 
		relative or absolute. Absolute name have a "." at the end of them.
	<ttl> 	speciries the time to live for the reords that follow. The default is 1 day. Modifying the 
		ttl can aid in the maintenance process if necessary.
	<class> IN, for internet; CH, for ChaosNet (obsolete) used internally for name servers to 
		identify themselves; HS, for Hesiod, a directory serveice used locally by some sites.
			Administrators and hackers use the name sever version number to identify 
				servers in need of an upgrade. 
	<type> 	This determines the contents of the data field.  There are four groups of resource 
		records:

	Zone records:		identify domains and name servers
		SOA	Start of authority	
		NS	Identifies ervers, delegates subdomains
	Baseic records:		map between name and addresses and map mail
		A	Name to IP address translation (IPv4)
		AAAA	Name to IP address translation (IPv6)
		MX	Mail exchange, controles email routing
		PTR	Pointer record, address to name server translation
	Security records:	add authenticatoin and signatures to zone files. Security resource records 
				require cryptographic processing and so much be managed with software tools.
		DS	Delegation signer, a hash of child zone's key signing key
		DNSKEY	Public key for a DNS name
		NSEC
		NSEC3	Next secure (version 3), used with DNSSEC for negative answers 
		RRSIG	Signature; signed, authenticated resource record set
		DLV	Lookaside, non root trust anchor for DNS
		SSHFP	SSH Fingerprint, SSH host key allows verification of DNS
		SPF	Sender policy framework, identifies mail server inhibits forgery
		DKIM	DomainKey Identificaton Mail, verify email sender and message integrity
	Optional records:	proivde information about host or domains
		CNAME	Canonical name, alias or nickname for a site
		SRV	Services, gives location of well known services
		TXT	Text, commets or untyped information
	
	The order of a resource record is arbitrary. But, it's good practice to put SOA first, then NS 
		next. Then sort by name.
	The secondary servers' zone file (resource records) are not managed manually, but 
		programatically.  Who knows what order you'll get when you look at them.

SOA record (Start of Authority) - 
	The <zone name> field or <name> field sometimes contains the @ smpbol. That name of the @ 
		symbol is the <zonw> field of the 'name.conf' and is the domain name. It also can be 
		the <name> filed of the 'nsd.conf' file.
	Each zone has exactly one start of authority (SOA) record. The record includes:
		<zone name> 	name of the zone
		<primary NS> 	the primary name server for the zone
		<ttl> 		ttl for NS
		<email address>	technical contact, note this is really dns-admin@google.com. Just 
				remove the first ",", replacing it with the @ symbol and remove the 
				FQDN "." to send an email to the domain admin.
		<serial number> The serial number of the zones configuration data.  The secondary 
				servers use this number to determine when to get fresh data.
		various timeout values
			<rf>	refresh timeout value, used for the secondary servers to know when to 
				get an update. When it expires, the secondary checks the serial number 
				of the primary. If the primary's serial number is larger, the secondary 
				requests a zone transfer to update the data.
			<rt> 	retry value, specified how long a secondary should wait before checking 
				the serial number of the primary
			<exp> 	expiration value, determines how long the secondary will serve as 
				primary if the primary doesn't respond. It should be a week to a month 
				(incase the primary is down for an exhorbantly long time).
			<min> 	minimum value, is used for negative caching. This is how long a 
				secondary will ignore a server that returned a failed query. BIND 
				ignores values larger than 3 hours.
			<updt> 
	;; Example (semeicolons ';' are comments)
	;; AUTHORITY SECTION:
	google.com.		60	IN	SOA	 ns3.google.com. dns-admin.google.com. 170511421         900  900  1800  60
	<zone name>             <ttl>	<tyep>  <class>  <primary NS>    <email address>       <serial number>   <rf> <rt> <exp> <min>

NS (name server) records:
	The name server records identify the servers that are authoriative (both primary and secondary) 
		for a zone. These servers also delagated to external organizations the subdomains 
		within its zones.
	The name server record includes:
		] $ dig NS
		;; QUESTION SECTION:
				IN	NS

		;; ANSWER SECTION:
.			415149	IN	NS	b.root-servers.net.
.			415149	IN	NS	j.root-servers.net.
.			415149	IN	NS	k.root-servers.net.
.			415149	IN	NS	g.root-servers.net.
.			415149	IN	NS	m.root-servers.net.
.		any	415149	IN	NS	ns1.any.root-servers.net.
.			415149	IN	NS	ubuntu.root-servers.net.
	The first 5 lines represent the name server for the a.root-servers.net. domain, specified in 
		the SOA (start of authority) record. The name sever (just an example) is 
		any.[fenl].root-servers.net.. Note the "." makes the domain name absolute. The class 
		(IN) didn't have to be listed either.  IN is the default.
	The 5th line delegates a subdomain to ns1.any and ubuntu.  The subdomain is called 
		any.root-server.net.  Both, ns1.any and ubuntu are name servers.  These records are 
		really part of the any.root-server.net subdomain, but they must appear in the parent 
		zone, root-servers.net. in order for the delegation to work.  In a similar fashion 
		root-server.net. must appear in .net.'s zone file to define the root-server.net's 
		subdomain and identify its servers.
	A list of the name servers in the parent's zone file should be kept up to date with those in 
		the subdomain's zone's file. If none of the name servers in the parents exist in the 
		child, the so-called lame delegation results. Extra servers in the child is ok, as long 
		as there is at least one child server listed by the parent.

A records:
	A (address) records are the heart and soul of the DNS database. They map hostnames to IP 
		addresses, being named forwarding zones. This was previously provided by /etc/hosts.

PTR records:
	The PTR (pointer) record maps from IP address back to hostname (the reverse zone). The 189 
		subnet, for example, has a zone name of 189.173.63.in-addr.arpa. The pointer record 
		for 189.173.63.in-addr.arpa is:
				1		IN 		PTR 	any.root-server.com
	Since the name 1 does not end in a dot, it is a relative.  But relative to what? Not 
		any.root-server.com -- for this to be accurate, the default zone has to be 
		183.173.63.in-addr.arpa. .
	Another way to do reverse matching is to put the records such as 
		[ 1 89		IN  PTR. any.root-server.com. ] in the zone 
		173.63.in-addr.arpa.. Since root-server.com. and 173.63.in-addr.arpa. are two different 
		regions of the DNS namespace, they each have their own start of authority (SOA) and 
		resource records. They represent two different zones.
	It is important that A records match their corresponding PTR records. Mismatched PTR records 
		can cause authentication errors that bring you network to a crawl.

MX records:
	The mail system uses mail exchanger [MX] record to route mail more efficiently.  This system 
		puts the flow of mail under the control of the system admin instead of senders. It's 
		format is
			<name>	[ttl]	[IN]	MX	<preference> <host>

	The records below route mail addressed to user@somehost.atrust.com to the machine 
		mailhost.atrust.com. If that machine is not available, the mail goes to 
		mail-relay.atrust.com. If both machines faile, the mail is routed to the requested 
		host: somehost.atrust.com.
			somehost	IN 	MX 	10 mailhost.atrust.com.
					IN 	MX 	20 mail-relay.atrust.com.
	Every host the outside world knows about should have an MX record. Host that can never or 
		should never receive email (e.g. network printers) should also have a MX record. Avoid 
		wildcard MX records. It sends every other domain to that MX subnet.

CNAME records:
	The canonical name (CNAME) is a nickname for the host.  When a query finds a CNAME for a record it stops looking for the CNAME and starts looking for the real name. 
	
	If you use CNAMES, the PTR record should point to the real name, not the CNAME.	You can avoid CNAMEs altogether by publishing an A record for both the host name and the real name. This makes lookups slightly faster.
	
	If you have a CNAME record, other records (A, MX, NS, etc.) must point to the real naem, not the CNAME. This rule was explicitly relaxed for DNSSEC which adds digtical signatures to each DNS record set. The RRSIG for the CNAME refers to the nickname.  
	
	The format of the CNAME record is:
			<nickname> [ttl] [IN] CNAME <hostname, i.e. realname>

The CNAME Hack
	CNAMES are also used to encourage the usage of CIDR addresses verses the use of byte boundary addresseing. For example if the class B network 128.138 was subnetted to a class C network, each subnet would make a tidy package in the in-addr.arpa domain. The reverse zone for the subnet would be 243.128.138.
	
	But what happens if the 243 network is further divided, into say, four pieces of /26 network? If all four pieces are assigned to the same organization, there is actually no problem.  The four subnets can share a single file that contains all of their PTR records.
	
	However if an ISP has four clients on different subnets. It must 1) maintain the reverse records for each of its clients or 2) it must find a way to take the third octet and delagate each independently.
	
	The trick is to add a CNAME for each host in the subnet.  The CNAME should point to the zone owner (SOA) for the subnet. The parent and the child domains must coordinate this. It may complicate the parents zone file, but it delegates authority for those hosts to the subdomains SOA.
	                                                                   |
The SRV (services) record
	The SRV records specifies the location of services in the domain.  
		Before SRV, you had to hope that a sysadmin added an FTP 
		record. Now you can query the SRV record for the ftp host. 
		The SRV records are used extensively by Windows.
	The SRV records resemble generalized MX records. They steer and load 
		balance connections from the outside world. The format is:
			<service.pro.name> [ttl] [IN] SVR <pri> <wt> <port> <target>
				<service>	a service defined in the IANA 
						(Internet Assigned Numbers 
						Authority) assigned numbers 
						database 
						(see https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml)
				<pro>		is either 'tcp' or 'upp'
				<name>>		the domain to which the SRV 
						record refers
				[IN]		class (network type)
				<pri>		MX stype priority
				<wt>		the weight used for load 
						balancing amoung serveral 
						servers, "0" means no load 
						balancing
				<port>		the port on which the 
						service runs
				<target>	the hostname of the server 
						that provides the service, 
						"." means the service is not 
						provided at this site
	To avoid a second round trip, DNS usually provides the A record of 
		the server providing the service in the answer along with 
		the target.
	
	MS Exchange uses SRV records to help Outlook clients find them and to provide automatic configuratoin for Outlook Anywhere.  The SRV records are teh fourth thing tried, after Active Directory and pre-configured URLs. Windows uses a GUI tool called DNS Manager to setup SRV records.

The TXT record
	The (TXT) text record adds arbitrary text to a host's DNS record.  For example, some sites have a text record that identifies them.  The format of the text record is:
			<name> [TTL] [IN] TXT <info>
	All info items must be quoted. You can use a single quoted string or multiple strings that are individually quated.  To encode long items such as address, use long text lines rather than a collection of several TXT records.
	
	Because TXT records have no particular format, they are sometimes used to test perspective new types of DNS records without requiring change to the DNS system itself.
	
IPV6 resource records
	IPV6, a new version of teh IP protocol, was originally motivated by a need for more IP network addresses. 
	
	The stopgap solutions for this problem (CIDR, NAT, private addresses, and stricter control of addresses) have been so successful it turns out that mass migration to IPV6 is not as essential as previouslly thought. 
	
SPF (sender policy framework) records
	SPF (sender policy framework) records are an attempt to identify forged email From headers which are often spam or phishing. 
	
	If the site receiving the messages determined that the headers are forged, it can drop it, filter it or tag it as spam before delivering it to the recipient.
	
	This functionality was first implemented as TXT records. But we now have a dedicated SPF record. (When I ddi a query for GMAIL, it returned the SOA for the spf query. Then I did a query for txt and got the correct SPF inforation.)
			] $ dig gmail.com txt
			;; ANSWER SECTION:
			gmail.com.		300	IN	TXT	"v=spf1 redirect=_spf.google.com"
			] $ dig _spf.google.com txt
			;; QUESTION SECTION:
			;_spf.google.com.		IN	TXT

			;; ANSWER SECTION:
			_spf.google.com.	255	IN	TXT	"v=spf1 include:_netblocks.google.com include:_netblocks2.google.com include:_netblocks3.google.com ~all"
	
	There are two version Microsofts (2v.0) and the rest of teh worlds (v1.0).
	
DKIM (DomainKey identificaton mail) and ADSP (author domain signing practice) records
	DomainKey identificaton mail allows the receiver to authenticate the sender and guarantee the message's integrity (no meddling).  It requires no per-user or per-host changes to implement. Everything currently is implmented in the TXT record.

	To find the DKIM record information, query the domain with '_domainkey' prepended to it.  This returns the sites public key in the record data.  The sending site computes a signature of certain header fields and the body with its private key.  It sends this DKIM Signature in the body of an outgoing message.  

	The sending site's public can be obtain by quering the TXT record at the loation of <selector>._domainkey.<domain>.  The receiving site does a DNS lookup for this key and uses it to validate the message signature.  Successful signature verification authenticates the message as having come from the purported sending domain and verifies that the message has not been modified in transit.

	Author domain signing practice expresses an overall policy with respect to signing messages.  You can access this through the text record at the domain _adsp.domainkey.<domain>. The TXT record should include a 'dkim=' clause specify 1) all, for domains that sign all outgoing email messages; 2) uknown, for domains that ight sign some email messages; and 3) discardable, for domains that sign all email and recommend that recipients discard essages who signature connot be verified.

	Currently gmail does not implement ADSP. However Yahoo! does.

SSHFP resource records
	DNS's SSHFP (ssh finger print) records allows ssh of the local host to verify the remote host's (user's) key automatically, ensuring hat the user has reached the intended machine and not some imposter.  SSHFP records do not store a complete copy of a host's public keys. Intead, they store digests (i.e., cryptographic hashes) of those keys
			<name> [ttl] [IN] SSHFP <algorithm># <fingerprint_algorithm># <fingerprint>
				<algorithm> 				identifies the public key cryptosystem used to generate the (remote) host's key, RSA is algorithm 1, DSA is algorithm 2
				<fingerprint_algorithm> 	how to process the the public key of the remote host to produce the hash for comparison; currently only SHA-1 is defined so it is always set to 1
				<fingerprint> 				the digest (cryptographic hash) of the key to me matched

	The remote host (user's end) stores the accept host's public keys in the .ssh/known_hosts file in the user's home directory.  You can grab the keys from that directory to build your SSHFP resource record. 

	You can also ask Openssh to use SSHFP recordsby setting the VerifyHostKeyDNS option to yes.  

DNSSEC resource records
	This section is too big for a sub section on it's records.  It is covered in detail later in the book.  Reprenting the records here, but will update when appropriate.
		DS	Delegation signer, a hash of child zone's key signing key
		DNSKEY	Public key for a DNS name
		NSEC
		NSEC3	Next secure (version 3), used with DNSSEC for negative answers 
		RRSIG	Signature; signed, authenticated resource record set
		DLV	Lookaside, non root trust anchor for DNS
		SSHFP	SSH Fingerprint, SSH host key allows verification of DNS
		SPF	Sender policy framework, identifies mail server inhibits forgery
		DKIM	DomainKey Identificaton Mail, verify email sender and message integrity

Glue records: links between zones
	Each zone stands alone with its own set of data files, name servers and clients. But zones need to form a coherent hierarchy: 'booklab.atrust.com' is a part of 'atrust.com' and we need a DNS linkage between them. 

	It si not necessry for a domain server to know about the zones above it in the DNS hierarchy. However, a parent domain must know the IP addresses of the 'names severs' below for all of its subdomains. *Only* the names servers known to the parent can be returned as referreals in responses to external queries.

	Repeated in DNS terms:  The parent zone needs to contain the NS record for each delegated zone.

	Since NS records are hostnames rather than IP address, the parent zone must have a way of resolving to IP (getting the A record). There are two ways to resolve this: 1) by including a copy of the A records directly with the parent zone or 2) by using stub zones.

	Glue Records - A Records in parent zone
		With the first record, simply include the NS and A records within the parent zone. The foriegn A records are called 'glue' records because they don't really belong in this zone file.  Missing or incorrect glue records leave the subzone inaccessible. The error returned is "host uknown".

		It is a common error to include glue records (A records) for hostnames that don't need them. For example including the A record for 'ns.cs.colorado.edu' in 'atrust.com''s zone file would initially be just unnecessary. But it could later become out of date and wrong if 'ns.cs.colorado.edu''s address were to change.  BIND logs their presence as an error.

		The scheme requires the child to keep in touch with the parent about any changes or additions to its name server fleet. Updates can be a tedious manual task that requires coordination across administrative boundaries.

	Stub Zones
		The second way to maintain links is to use stub zones. A stub zone is esssentially the same thing as a secondary zone, but it includes only the zone's NS records and the corresponding A records of those name servers.

		Like a secondary, a stub zone is automatically updated so it eliminates the need to for administrative communication. Stub zones *must* be configured identially on both the primary and secondary servers **of the parent zone**. 

		An important acveat is that stub zones msut be configured identically on both the primary and secondary servers of *the parent zone*. Just keep in touch manually with your parent domain and verify its configuration a couple times a year (especially if its local).

		To see which of your server your parent domain is advertising, run:
						dig <parent-domain> ns
		To determine the name servers for yo uparent domain, pick one and run:
						dig @<name-server.parent-domain> <child-domain> ns
		This will show you which of your name servers the parent domain is publishing.

		Stub zones are good for internal networks that use private IP address space and you need to keep the delegations in sync. 
*************************************************************
*							    *
*							    *
*							    *
****    Section 17.9 - The BIND Software [pg597 - 618]  *****
The Berkely Internet Name Domain (BIND) system have four main flavors: BIND 4, BIND 8, BIND 9 and BIND 10. This section only discusses BIND 9.

To determine the version number, sometimes the administrator hides this information, yet try using the dig command:
		[20171016-15:21:16 syeedode:~/java_projects/notes master*] $ dig @k.root-servers.net version.bind txt chaos

		; <<>> DiG 9.8.3-P1 <<>> @k.root-servers.net version.bind txt chaos
		; (2 servers found)
		;; global options: +cmd
		;; Got answer:
		;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 8054
		;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
		;; WARNING: recursion requested but not available

		;; QUESTION SECTION:
		;version.bind.			CH	TXT

		;; ANSWER SECTION:
		version.bind.		0	CH	TXT	"9.11"

		;; Query time: 85 msec
		;; SERVER: 2001:7fd::1#53(2001:7fd::1)
		;; WHEN: Mon Oct 16 15:21:25 2017
		;; MSG SIZE  rcvd: 47
  
Another piece of dat in the CHAOS class identifies the name of the server queried.  Some of the busiest servers (e.e., the root name servers) are multiple machines scattered aroudn the globe, that all have the same server name and IP address.

This replication scheme is called "anycast routing". The routing system takes you to the closes instance. If you are trying to debug a problem, it may be important to distinguish which of the replicated server you have reached.
		[20171016-15:35:45 syeedode:~/java_projects/notes master*] $ dig @k.root-servers.net hostname.bind txt chaos

		; <<>> DiG 9.8.3-P1 <<>> @k.root-servers.net hostname.bind txt chaos
		; (2 servers found)
		;; global options: +cmd
		;; Got answer:
		;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 25385
		;; flags: qr rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0
		;; WARNING: recursion requested but not available

		;; QUESTION SECTION:
		;hostname.bind.			CH	TXT

		;; ANSWER SECTION:
		hostname.bind.		0	CH	TXT	"ns3.gb-lon.k.ripe.net"

		;; Query time: 100 msec
		;; SERVER: 2001:7fd::1#53(2001:7fd::1)
		;; WHEN: Mon Oct 16 15:36:00 2017
		;; MSG SIZE  rcvd: 65
You could also use [dig @k.root-servers.net id.server txt ch].

As an administrator, you an start the name server ('named' or 'nsd') with the -v flag to print its version to the standard output. The BIND name server logs its version to syslog as it start up.

Components of BIND
	The BIND distribution has four major compontents:
			named					daemon that answers queries
			resolver library 		queries DNS servers on behalf of users
			cmd line interface 		DNS interface with 'dig', 'nslookup', 'host'

	The 'named' configuration consists of the config file, the zone data files that contain address mappings for each host, and the root name server hints file. 

	Authoritative servers need a config file and zone data files for each zone for which they are the primary server.

	Caching servers need the config file and the root hints file.

	'named''s config file is different from the resource record files.

	'named''s config file, 'named.conf', specifies the roles (primary, secondary, stub or caching-only) of its host and how it should obtain its copy of the for every zone it serves.  It is also where the options for the operation of 'named' and zone specific operation applying to DNS traffic management.

	You can check that the config file is formatted correctly using 'named-checkzone' and 'named-checkconf', for zone files and config file respectively.  It doesn't catch everything. For example a missing glue record can still cause heavy load on root and gTLD (generic top level domains) servers.

	Each statement begins with a keyword. There will only be one instance of the 'options' and 'logging' statements; all others can have more than one.  Below is a preview of the statements for the 'named.conf':
				include 				Interpolates a file
				options 				Sets global configuration options/defaults
				acl 					Defines access control lists
				key 					Defines authentication infomration
				trusted-keys 			Uses preconfigured cryptographic keys
				server 					Specifies per-server options
				masters 				Defines a list of primary for stub and secondary zones
				logging 				Specifies logging categories and their destinations
				statistics-channels 	Outputs real-time statistics in XML
				zone 					Defines a zone of resource records
				controls 				Defines channels used to control 'named' with 'rndc' 
				view 					Defines a view of the zone data

	The address match list is a data structure that is used in many of the 'named.conf' statements.  An address match list is a generalization of an IP address that includes the following items:
				- An IP address, either v4 or v6
				- An IP network, specified with a CIDR netmask
				- The name of a previously defined ACL
				- The name of a cryptographic authentication key
				- The '!' character to negate things

	Address match lists are used as parameters to many statements and options, here are examples
				{ ! 1.2.3.13; 1.2.3/24; };
				{ 128.138/16; 198.11.16/24; 204.228.69/24; 127.0.0.1; };
	The first of these lists excludes the host 1.2.3.13, but includes the rest of the 1.2.3.0/24 network.  The second defines the networks assigned to the University of Colorado.  

	The order of entries is important; the top of the file is more important than the bottom.  The address match list is listed in descreasing order of importance, when matching an IP address the first IP address found will be matched first. For example if the first list swaped it's entries, 1.2.3.13 would never be negated.


The include statement
	To break up or better orgainize a large configuation, subsidiary files are brought into 'named.conf' with an 'include' statement:
			include <path>

	If the path is relative, it is relative to the directory specified with the 'directory' option.

	A common use of the 'include' statement is to bring n cryptographic keys, rather than closing read access to the whole 'named.conf' file.

	Many sites put zone statments in a separate file. This helps separate the parts of the configuration that are static from those that are likely to change.

The options statement
	The 'options' statement specifies global options which may be overridden for particualr zones or servers. If no 'options' statement is the 'name.conf', default values are used. The format is:
			options { 
				option;
				option;
			}

	BIND has over 150 options. The ARM document in the 'doc' directory describes each one. Options can be listed in any order. Here are some examples with [default values]:

	'directory' and 'key-directory'
		directory "path"		[diretory where teh server was started]
		key-directory "path"	[same as 'directory' entry]

		The 'directory' statement causes 'named' to 'cd' to s specified directory. Pathnames in 'named''s configuration are relative to this option. Output files and logging files go here as well.

		The 'key-directory' is where cryptographic keys are stored, it should not be word readable.

		The BIND related configuration files (other than 'named.conf' and 'resolv.conf') should be beneath '/var'. Examples are '/var/named' or '/var/domain'.

	'version'
		version "string"		[real version number of the server]
		hostname "string"		[real hostname of the server]
		server=id "string"		[none]

		The 'version' string identifies the version of the name server software running on the server. The 'hostname' and 'server-id' identifies the server itself.

		These are the values reported by CHOAS in the TXT records. It is discouraged to tamper with these values.

		If you must hide the version number, enter a string for your sysadmins but isn't obvious to the outside world. The NSID record does exactly this.

		The 'hostname' and 'server-id' are used for anycast routing to duplicate instances of the root and gTLD servers.

	'notify', 'also_notify' and 'allow-notify'
		notify yes | master-only | explicit | no; 		[yes]
		also-noitfy <servers_ipaddrs>;					[empty]
		allow-notify <address-match-list>; 				[empty]

		The 'notify' and  'also-notify' clauses apply only to primary servers. 'allow-notify' applies only to secondary servers.

		Early versions of BIND synchronized zone files when the refresh timeout in the SOA record had expired.

		These days, the primary 'named' notifies its peers whenever the zone database has been reloaded if the 'notify' is set to yes. 

		The secondary servers can rendezvous with the master to see if the file has changed, and if so, to update their copies of the zone data.

		You can use 'notify' as a global and zone specific option, making the zone file converge more quickly after you make a change.

		By default every authoritative server sends updated to every other authoritative server (splattercast). If 'notify' is set to 'master-only', notifications are sent to secondary servers for which this server is a primary.

		If 'notify' is set to 'explicit', then named only notifies servers listed in 'also-notify'.

		'named' figures out secondary servers by looking at the zone's NS records. 'also-notify' allows other servers to be included, not just name-servers.

		Don't 'also-notify' stub servers they are only interested in the zone's NS records and can wait for the regular update cycle.

		You must use the 'allow-notify' clause if you want a name server other than the primray to notify secondaries.

	'recursion' and 'allow-recursion'





This option allows curl to proceed and operate even for server connections otherwise considered insecure.
	















































