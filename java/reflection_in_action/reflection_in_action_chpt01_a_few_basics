************************************************************************
************************************************************************
metadata 		- representation of the program itself
metaobjects 	-  what metadata is oganized into
introspection 	= runtime self-examination of metaobjects 
************************************************************************
************************************************************************

Chapter 1 - A few basics

Consider the following scenarios:
		■ The system needs to accept new components even after it is built and deployed. You need to completely satisfy the need for pluggability.

		■ Using a different remote mechanism will increase sales. You now must reimplement all of your remote interfaces.

		■ The public API to your module needs to accept calls only from specific packages to keep outsiders from misusing your module. You add a parameter to each of the API calls that will hold the package name of the calling class. But, now legitimate users must change their calls, and unwelcome code can fake a package name.

These scenarios illustrate modularity, remote access, and security—and do not seem to have much in common.

Reimplementing interfaces, patching JAR files, and modifying method calls are all tedious and mechanical tasks.
		1 Examine the program for its structure or data.
		
		2 Make decisions using the results of the examination.
		
		3 Change the behavior, structure, or data of the program based upon the decisions.

Learning reflection allows you to get beyond this assumption and make your program do this adaptation for you. 
		public class DemoTypeInformation {
		    public void printName() {
		        System.out.println("Inside method printName: " + this.getClass().getName());
		    }
		}

The line
		(new HelloWorld()).printName();
sends the string HelloWorld to standard out. 

Without being overridden, the printName method behaves differently for each subclass than it does for HelloWorld. 
		The printName method is flexible; it adapts to the class that inherits it, causing the change in behavior.

As we build our examples in scope and complexity, we will show you many more ways to attain flexibility using reflection.

1.1 Reflection’s value proposition
Reflection is the ability of a running program to examine itself and its software environment, and to change what it does depending on what it finds.

To perform this self-examination, a program needs to have a representation of itself. This information we call metadata. 

In an object-oriented world, metadata is organized into objects, called metaobjects. 

The runtime self-examination of the metaobjects is called introspection.

The introspection step is followed by behavior change

In general, there are three techniques that a reflection API can use to facilitate behavior change: 
		direct metaobject modification, 

		operations for using metadata (such as dynamic method invocation), and 

		intercession, in which code is permitted to intercede in various phases of program execution.

 Java supplies a rich set of operations for using metadata and just a few important intercession capabilities.

Java avoids many complications by not allowing direct metaobject modification.

Applications programmed with reflection adapt more easily to changing requirements.

It's not enough to just learn the concepts and the use of the API. You must also be able to distinguish between situations when reflection is absolutely required. 
		When it may be used advantageously from those when it should be shunned.

Three issues have impeded the broad use of reflection: 
		■ security
				Java is so well crafted and its reflection API so carefully constrained that security is controlled simply

		■ code complexity
				 By learning when to use reflection and when not to, you will avoid unnecessarily complex code

		■ runtime performance 
				You will learn to evaluate the performance of your designs, thereby ensuring the resulting code satisfies its performance requirements.

Knowing how to produce flexible code increases your value in the marketplace.

************************************************************************
************************************************************************
metadata 		- representation of the program itself
metaobjects 	-  what metadata is oganized into
introspection 	= runtime self-examination of metaobjects 
************************************************************************
************************************************************************

Reflection—introspection followed by behavior change—is the path to flexible software. 

1.2 Enter George the programmer
Each of these components provides a setColor method that takes a java.awt.Color parameter. These components cannot be referenced using a common type that supports this setColor method.

They just want to call setColor regardless of a component’s concrete type.

1.2.1 Choosing reflection
The team’s code must accomplish two steps:
		1 Discover a setColor method supported by the component.

		2 Call that setColor method with the desired color.

If George’s team controlled all of the source code, the components could be refactored to implement a common interface that declares setColor. 

However, the team does not control the standard Java components or third-party components.

Alternatively, the team could implement an adapter for each component. 
		 However, because of the large number of component classes that the team is using, the solution would cause an explosion in the number of classes to maintain.

		 This solution would cause an explosion of the number of objects in the system at runtime.

Each of these alternatives involves program changes that adjust or discover the type of a component. George understands that it is only necessary to find a 'setColor' method and call it.

Having studied a little reflection, he understands how to query an object’s class for a method at runtime. 
		Reflection is uniquely suited to solving this problem because it does not over-constrain the solution with type information.

1.2.2 Programming a reflective solution
public class ReflectiveColorSetter {
    /**
     * This method uses reflection to invoke the 'setColor' method on any
     * object that has a 'setColor' method. We say that setObjectColor introspects
     * on its parameter, obj.
     *
     * @param obj
     * @param color
     */
    public static void setObjectColor(Object obj, Color color) {
        /** 1 Query the object for the class */
        Class cls = obj.getClass();

        try {
            Method method = cls.getMethod("setCoilor", /** <- Queries class for setObjectMethod */
                    new Class [] {Color.class});
            /**
             * Dynamic invocation is a feature that enables a program to call a method on an object at
             * runtime without specifying which method at compile time. This line calls the resulting 
             * method on obj, passing it the color
             */
            method.invoke(obj, new Object[]{color});
        } catch (NoSuchMethodException ex) {
            throw new IllegalArgumentException(cls.getName() + " does not support setColor(Color)");
        } catch (IllegalAccessException ex) {
        	/** The class containing listing 1.1 does not have access privileges to call a protected, package, or private visibility setColor method. */
            throw new IllegalArgumentException("Insufficient access permision to call"
                    + "setColor(:Color) in class " + cls.getName());
        } catch (InvocationTargetException ex) {
            /** 6 'setColor' method throws an exception */
            throw new RuntimeException(ex);
        }
    }
}

George does not know which 'setColor' method to call when writing the code because he does not know the type of the obj parameter.

George’s program discovers which 'setColor' method is available at runtime through introspection.

Dynamic invocation introduces latency by resolving which method to call and checking access at runtime rather than at compile time.
		The method calls for introspection are not necessary if the information is known at compile time.

1.3 Examining running programs 
Reflection is a program’s ability to examine and change its behavior and structure at runtime.

Think of introspection as looking at yourself in a mirror. The mirror provides you with a representation of yourself—your reflection—to examine. 

************************************************************************
************************************************************************
metadata 		- representation of the program itself
metaobjects 	-  what metadata is oganized into
introspection 	= runtime self-examination of metaobjects 
base-level objects 	- Objects used to accomplish the main purpose of an application 
base program 	- the non reflective parts of the program 
************************************************************************
************************************************************************

By examining its self-representation, a program can obtain the right information about its structure and behavior to make important decisions.

Listing 1.1 uses instances of Class and Method to find the appropriate setColor method to invoke. These objects are part of Java’s self-representation.

We refer to objects that are used to accomplish the main purposes of an application as base-level objects. 

In the 'setObjectColor' example above, the application that calls George’s method as well as the objects passed to it as parameters are baselevel objects.

 We refer to the nonreflective parts of a program as the base program. 

 For the moment, it is important to understand that the figure can be read as “fido, a base-level object, is an instance of Dog, a class object on the metalevel.”

 Metaobjects are a convenient self-representation for reflective programming.
 		Imagine the difficulty that using the source code or the bytecodes as a representation.

Metaobjects often also provide ways of changing program structure, behavior, or data. 
		In our example, George uses dynamic invocation to call a method that he finds through introspection.

Other reflective abilities that make changes include 
		reflective construction, 

		dynamic loading, and 

		intercepting method calls.

		This book shows how to use these mechanisms and others to solve common but difficult software problems.

1.4 Finding a method at runtime
George’s 'setObjectColor' method is passed a parameter obj of type 'Object'. The method cannot do any introspection until it knows the class of that parameter.

The 'getClass' method is often used to begin reflective programming because many reflective tasks require objects representing classes.
		The getClass method is final. This keeps Java programmers from fooling reflective programs. If it were not final, a programmer could override getClass to return the wrong class.

Throughout this book, we use the term 'class object' to mean an instance of java.lang.Class. 
		Class objects are the most important kind of metaobject because all Java programs consist solely of classes.

Class objects provide programming metadata about a class’s fields, methods, constructors, and nested classes.
		Class objects also provide information about the inheritance hierarchy and provide access to reflective facilities.

Once the setObjectColor method has discovered the class of its parameter, it queries that class for the method it wants to call:
-->		Method method = cls.getMethod("setColor", new Class[] {Color.class});

The first parameter to this query is a String containing the desired method’s name, in this case, 'setColor'.

The second parameter is an array of class objects that identify the types of the method’s parameters.
		In this case, we want a method that accepts one parameter of type Color, so we pass getMethod an array of one element containing the class object for Color.

The getClass method is useful for obtaining the class for an object reference, but when we know only the name of the class, we need another way. 

Class literals are Java’s way to specify a class object statically.

Syntactically, any class name followed by '.class' evaluates to a class object.

In the example, George knows that setObjectColor always wants a method that takes one Color argument. He specifies this using 'Color.class'.

In querying for a parameterless method, it is legal to supply null, which is treated the same as a zero-length array.

'Class' has other methods for introspecting about methods.
		Method getMethod( String name, Class[] parameterTypes )
				Returns a Method object that represents a public method (either declared or inherited) of the target Class object with the signature specified by the second parameters

		Method[] getMethods()
				Returns an array of Method objects that represent all of the public methods (either declared or inherited) supported by the target Class object

		Method getDeclaredMethod(String name, Class[] parameterTypes )
				Returns a Method object that represents a declared method of the target Class object with the signature specified by the second parameters. The set of declared methods does not include methods that the class inherits. However, this method does return methods of all visibilities—public, protected, package, and private.

		Method[] getDeclaredMethods()
				Returns an array of Method objects that represent all of the methods declared by the target Class object. The set of declared methods does not include methods that the class inherits. However, this method does return methods of all visibilities—public, protected, package, and private.

A programmer querying a class using 'getDeclaredMethod' might accidentally specify a method that the class does not declare. In this case, the query fails with a 'NoSuchMethodException'.

The discussion of the methods from table 1.1 indicates that Java reflection uses instances of 'Class' to represent types.
	For example, getMethod from listing 1.1 uses an array of 'Class' to indicate the types of the parameters of the desired method.

Java represents primitive, array, and interface types by introducing class objects to represent them.
		These class objects cannot do everything that many other class objects can. For instance, you cannot create a new instance of a primitive or interface.

		Class getComponentType()
				If the target object is a Class object for an array, returns the 'Class' object representing the component type

		boolean isArray()
				Returns true if and only if the target Class object represents an array

		boolean isInterface()
				Returns 'true' if and only if the target 'Class' object represents an interface

		boolean isPrimitive()
				Returns 'true' if and only if the target 'Class' object represents a primitive type or 'void'

The rest of this section explains in greater detail how Java represents primitive, interface, and array types using class objects.

1.5.1 Representing primitive types
Although primitives are not objects at all, Java uses class objects to represent all eight primitive types.
		For example, to specify type 'int', use 'int.class'.
-->		Method m = Vector.class.getMethod("get", new Class[] {int.class});

A class object that represents a primitive type can be identified using 'isPrimitive'.

Java does have a class object to represent 'void'. The 'isPrimitive' method returns true for 'void.class'.
		When introspecting for the return type of a method, 'void.class' is used to indicate that a method returns no value.

1.5.2 Representing interfaces 
A class object that represents an interface may be queried for the methods and constants supported by that interface. 
		The 'isInterface' method of 'Class' can be used to identify class objects that represent interfaces. 

1.5.3 Representing array types
Java arrays are objects, but their classes are created by the JVM at runtime. A new class is created for each element type and dimension. 

Class literals for arrays are specified like any other class literal. 

For instance, to specify a parameter of a single-dimension Object array, use the class literal 'Object[].class'.

Class objects that represent arrays can be identified using the 'isArray' method of 'Class'.

The component type for an array class can be obtained using 'getComponentType'. 

Java treats multidimensional arrays like nested single-dimension arrays. Therefore, the line
-->		int[][].class.getComponentType()
evaluates to 
-->		int[].class. 


************************************************************************
Note the distinction between component type and element type. For the array type int[][], the component type is int[] while the element type is int.
************************************************************************

Let’s examine what can be done once a method is retrieved.




************************************************************************
************************************************************************
metadata 		- representation of the program itself
metaobjects 	- what metadata is oganized into
introspection 	= runtime self-examination of metaobjects 
base-level objects 	- Objects used to accomplish the main purpose of an application 
base program 	- the non reflective parts of the program 
************************************************************************
************************************************************************

1.6 Understanding method objects
'Method' is the type of the result of all of the method queries in table 1.1.

It should be no surprise that 'java.lang.reflect.Method' is the class of the metaobjects that represent methods.

Below shows some of the methods supported by the metaobject class 'Method'.
		Class getDeclaringClass()
				Returns the 'Class' object that declared the method represented by this 'Method' object

		Class[] getExceptionTypes()
				Returns an array of Class objects representing the types of the exceptions declared to be thrown by the method represented by this Method object

		int getModifiers()
				Returns the modifiers for the method represented by this 'Method' object encoded as an 'int'

		String getName()
				Returns the name of the method represented by this Method object

		Class[] getParameterTypes()
				Returns an array of 'Class' objects representing the formal parameters in the order in which they were declared

		Class getReturnType()
				Returns the 'Class' object representing the type returned by the method represented by this 'Method' object

		Object invoke(Object obj, Object[] args)
				Invokes the method represented by this 'Method' object on the specified object with the arguments specified in the 'Object' array

1.6.1 Using dynamic invocation
Dynamic invocation enables a program to call a method on an object at runtime without specifying which method at compile time.
		It relies upon introspection to examine the class of a parameter, 'obj', at runtime to find the right method.

		As a result of the introspection, the 'Method' representing 'setColor' is stored in the variable 'method'.

Following the introspection in listing 1.1, setColor is invoked dynamically with this line:
-->		method.invoke(obj, new Object[] {color});
where the variable color holds a value of type Color. 

The setColor method is invoked on obj and is passed the ****value*** of color as a parameter.

The first parameter to 'invoke' is the target of the method call, or the 'Object' on which to invoke the method.

***If setColor is declared static by the class of obj, the first parameter is ignored because static methods do not need invocation targets.***
		For a static method, null can be supplied as the first argument to invoke without causing an exception.

The second parameter to invoke, args, is an Object array. 
		The invoke method passes the elements of this array to the dynamically invoked method as actual parameters.

		For a method with no parameters, the second parameter may be either a zero-length array or null.

1.6.2 Using primitives with dynamic invocation
The second parameter to invoke is an array of 'Object', and the return value is also an 'Object'.
		It is important to understand how to use primitives with the invoke method.

If the type of a parameter is a primitive, invoke expects the corresponding args array element to be a wrapper object containing the argument. 
		When invoking a method with an int parameter, wrap the int argument in a 'java.lang.Integer' and pass it into the 'args' array.

		The invoke method unwraps the argument before it passes it to the actual code for the method being invoked.

When invoking a method with an int return type, the program receives an object of type Integer in return.

If the method being invoked is declared with a 'void' return, 'invoke' returns the value 'null'.

***So, primitives need to be wrapped when passed into a dynamic invocation and unwrapped when received as a return value.***

For clarity, consider the following dynamic call to 'hashCode' method on our 'obj' variable from the example.
-->		Method method = obj.getClass().getMethod("hashCode", null); 
-->		int code = ((Integer) method.invoke(obj, null)).intValue();

The first line introspects for the method 'hashCode' with no arguments.
		This query does not fail because that method is declared by 'Object'.

		The 'hashCode' method returns an 'int'.

The second line invokes 'hashCode' dynamically and stores the return value in the variable 'code'.
		Notice that the return value comes back wrapped in an 'Integer', and it is cast and unwrapped.

1.6.3 Avoiding invocation pitfalls
At one point, George thinks, “If I have a Method representing setColor, why do I need to introspect for it every time? I’ll just cache the first one that comes along and optimize out the rest of the queries.”

When he tries this, he gets an 'IllegalArgumentException' from invoke on many of the subsequent calls. The exception message means that the method was invoked on an object that is not an instance of the declaring class.

George’s optimization fails because it assumes that all methods with the same signature represent the same method.
		This is not the case. In Java, each method is identified by both its signature and its declaring class.

Figure 1.3 shows the classes 'Animal' and 'Shape', which both declare a setColor method with the same signature. 
		These two 'setColor' methods are not the same method in Java because they do not have the same declaring class.

		The Java language considers the two 'setColor' methods shown to be different methods. 

		However, the 'setColor' method for 'Dog' is the same method as the one for 'Animal' because Dog inherits 'setColor' from 'Animal'.

When dealing with this situation, it is usually simplest to introspect for a Method each time instead of caching.

Several other exceptions can occur when calling invoke. 
		If the class calling 'invoke' does not have appropriate access privileges for the method, 'invoke' throws an 'IllegalAccessException'.
				For example, this exception can occur when attempting to invoke a private method from outside its declaring class.

		'IllegalArgumentException' can be thrown by invoke under several circumstances. 
				Supplying an invocation target whose class does not support the method being invoked causes an 'IllegalArgumentException'.

				Supplying an args array of incorrect length or with entries of the wrong type also causes an 'IllegalArgumentException'. 

		If any exception is thrown by the method being invoked, that exception is wrapped in an 'InvocationTargetException' and then thrown.

Dynamic invocation is a truly important feature in Java reflection.
		Without it, each method call must be hard-coded at compile time, denying programmers the flexibility of doing what George does in listing 1.1.

In later chapters, we return to dynamic invocation for more advanced applications and expose other powerful ways to use information gained through introspection.

************************************************************************
************************************************************************
metadata 			- representation of the program itself
metaobjects 		- what metadata is oganized into
introspection 		- runtime self-examination of metaobjects 
base-level objects 	- Objects used to accomplish the main purpose of an application 
base program 		- the non reflective parts of the program 
************************************************************************
************************************************************************

1.7 Diagramming for reflection
Reflection represents all of the class diagram entities at runtime using metaobjects. Therefore, combining class and object diagrams is useful for clearly communicating reflective designs.

Modeling reflection calls for combining classes or only non-class objects and using the 'instanceOf' dependency to connect an object with its instantiating class.

This book uses the instanceOf dependency only to show that an object is a direct instance of a class.

For clarity, we partition figure 1.4 into its base level and metalevel, although that partition is not standard UML. 
		The diagram shows an object, dolly, which is an instance of the class 'Sheep'. 

		 It describes Sheep as a Mammal that implements Cloneable. 

		 The important thing to notice about this diagram is that it includes both objects and classes, as is necessary for describing reflective systems.

1.8 Navigating the inheritance hierarchy
Listing 1.1 is not seeing a 'setColor' method inherited by her component. The inherited method is protected, and so it is not found by the line:
-->		Method method = cls.getMethod("setColor", new Class[] {Color.class});

We need a method that introspects over methods of all visibilities, declared or inherited. 
		Listing 1.3 shows the source code for 'getSupportedMethod', a method that accomplishes that query.

		/**
		 * Listing 1.3
		 *
		 * This method is a recursive method that traverses the inheritance hierarchy
		 * looking for a method with the correct signature using
		 * {@code getDeclaredMethod}.
		 */
		public static Method getSupportedMethod(Class cls, String name, Class[] paramTypes)
		        throws NoSuchMethodException {
		    if(Objects.isNull(cls)) {
		        throw new NoSuchMethodException();
		    }
		    try {
		        /**
		         * The {@code getSuperclass} method returns the class object representing the class 
		         * that its target extends.
		         */
		        return cls.getDeclaredMethod(name, paramTypes);
		    } catch (NoSuchMethodException ex) {
		        return getSupportedMethod(cls.getSuperclass(), name, paramTypes);
		    }
		}

If cls represents 'Object', 'getSuperclass' returns 'null', and 'getSupportedMethod' throws a 'NoSuchMethodException' on the next call.

		/**
		 * Listing 1.4
		 *
		 * This update allows {@code setObjectColor} to retrieve metaobjects for private, package,
		 * and protected methods that are not retrieved by {@code getMethod}. However, this update 
		 * does not guarantee permission to invoke the method.
		 *
		 * @param obj
		 * @param color
		 */
		public static void setObjectColor(Object obj, Color color) {
		    Class cls = obj.getClass();
		    try {
		        Method method = getSupportedMethod(cls, "setColor", new Class[]{Color.class});
		        method.invoke(obj, new Object[]{color});
		    } catch (NoSuchMethodException e) {
		        throw new IllegalArgumentException(cls.getName()
		                + " does not support method setColor(:Color)");
		    } catch (IllegalAccessException e) {
		        /**
		         * If {@code setObjectColor} does not have access to the  inherited method, an 
		         * {@code IllegalAccessException} is thrown instead of a 
		         * {@code NoSuchMethodException}.
		         * 
		         */
		        throw new IllegalArgumentException(cls.getName()
		                + " Insufficient access permission to call setColor(:Color) in class "
		                + cls.getName());
		    } catch (InvocationTargetException ex) {
		        throw new RuntimeException(ex);
		    }
		}

Let’s continue to discuss the tools that make this enhancement possible.

1.8.1 Introspecting the inheritance hierarchy
As shown in the previous section, runtime access to information about the inheritance hierarchy can prevent extra work.

Getting the superclass of a class is only one of the operations that Java reflection provides for working with the inheritance hierarchy.

Below shows the signatures and return types for the methods of 'Class' for dealing with inheritance and interface implementation. 

		Class[] getInterfaces()
				Returns an array of 'Class' objects that represent the direct superinterfaces of the target 'Class' object.

		Class getSuperclass()
				 Returns the 'Class' object representing the direct superclass of the target 'Class' object or 'null' if the target represents 'Object', an interface, a primitive type, or void

		 boolean isAssignableFrom( Class cls )
	 			Returns 'true' if and only if the class or interface represented by the target 'Class' object is either the same as or a superclass of or a superinterface of the specified 'Class' parameter

		boolean isInstance( Object obj )
				Returns 'true' if and only if the specified 'Object' is assignment-compatible with the object represented by the target 'Class' object

The 'getInterfaces' method returns class objects that represent interfaces.

Note the method names getInterfaces and getSuperclass are slightly inconsistent with terminology defined by the Java Language Specification.
		A 'direct superclass' is the one named in the extends clause of a class declaration. 
				A class X is a 'superclass' of a class Y if there is a sequence of one or more direct superclass links from Y to X.

		There is a corresponding pair of definitions for 'direct superinterface' and 'superinterface'.

		Consequently, 'getSuperclass' returns the direct superclass and 'getInterfaces' returns the direct superinterfaces.

To get all of the methods of a class, a program must walk the inheritance hierarchy. Luckily, this walk is not necessary to query whether a class object represents a subtype of another class object.

This query can be accomplished using the 'isAssignableFrom' method. 
		For example, the following lines evaluate to true:
-->				Object.class.isAssignableFrom(String.class)

-->				java.util.List.class.isAssignableFrom(java.util.Vector.class)

-->				double.class.isAssignableFrom(double.class)

		The line below, however, evaluates to false:
-->				Object.class.isAssignableFrom(double.class)

The 'isInstance' method is Java reflection’s dynamic version of 'instanceof'. 
		If the target class object represents a class, 'isInstance' returns 'true' 
				if its argument is an instance of 
						that class or 
						
						any subclass of that class. 

		If the target class object represents an interface, 'isInstance' returns 'true' 
				if its argument’s class implements 
						that interface or 

						any subinterface of that interface.

1.8.2 Exposing some surprises

holmesreginald0719@yahoo.com






"#access_token=EAADRJoGtw3UBAKwwv12M3YFwvnJ5Ul4drz75uFZCZAF6JMgxSXG588UgD3ON7thYDez9F6wZAACP9fBLHfHeYpINgT6C0jjvzm4p1GExUZBL7jBMTLA4XalNjL0doKe7l1vJKO4IXZBqxQqtTlvrL3UZBthQ8V2w0a9i8if0ICRZAD2Edr57wbneOPDaZAisjQ8ZD&

expires_in=5500&
reauthorize_required_in=7776000&
data_access_expiration_time=1556198900"






		















































