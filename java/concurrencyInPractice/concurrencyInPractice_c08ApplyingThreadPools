	                                                                   |
	                                                                   |
************************************************************************
** Note that a nonzero-length array is always mutable, so it is wrong **
**    for a class to have a public static final array field, or an    **
**               accessor that returns such a field.                  **
************************************************************************
************************************************************************
*							    *
*							    *
*							    *
toc: 
pg 186 - 
************************************************************************************
*******                  Chapter 8 - Applying Thread Pools                  ********
************************************************************************************
This chapter looks at advanced options for configuring and tuning thread pools, describes hazards to watch for when using the task execution framework, and offers some more advanced examples of using 'Executor'.

8.1 Implicit couplings between tasks and execution policies
	We claimed earlier that the Executor framework decouples task submission from task execution. This was a bit of an overstatement.

	The Executor framework specifies and modifies excution policy, not all tasks are compatible with all execution policies. 
			Dependent tasks - The most well behaved tasks are independent: those that do not depend on the timing, results, or side effects of other tasks.
					When executing independent tasks in a thread pool, you can freely vary the pool size and configuration without affecting anything but performance.

					On the other hand, when you submit tasks that depend on other tasks to a thread pool, you implicitly create constraints on the execution policy that must be carefully managed to avoid liveness problems (see Section 8.1.1).

			Tasks that exploit thread confinement - Single-threaded executors make stronger promises about concurrency than do arbitrary thread pools.
					They guarantee that tasks are not executed concurrently, which allows you to relax the thread safety of task code.

					 Objects can be confined to the task thread, thus enabling tasks designed to run in that thread to access those objects without synchronization, even if those resources are not thread-safe.

					 This forms an implicit coupling between the task and the execution policy.
					 		The tasks require their executor to be single-threaded.
					 				In this case, if you changed the Executor from a single-threaded one to a thread pool, thread safety could be lost.






































































































