	                                                                   |
	                                                                   |
************************************************************************
** Note that a nonzero-length array is always mutable, so it is wrong **
**    for a class to have a public static final array field, or an    **
**               accessor that returns such a field.                  **
************************************************************************
************************************************************************
*							    *
*							    *
*							    *
toc: 
pg 111 - 
************************************************************************************
*Chapter 2 - Item 2: Consider a builder when faced with many constructor parameters*
************************************************************************************
CLASSES and interfaces lie at the heart of the Java programming language. They are its basic units of abstraction. 

The language provides many powerful elements that you can use to design classes and interfaces. 

This chapter contains guidelines to help you make the best use of these elements so that your classes and interfaces are usable, robust, and flexible.




Item 2: Consider a builder when faced with many constructor parameters

Static factories and constructors share a limitation: they do not scale well to large numbers of optional parameters.

Consider the case of a class that has a few required fields and over twenty optional fields. Most instances have nonzero values for only a few of these optional fields. 

Traditionally, programmers have used the telescoping constructor pattern, in which you provide a constructor with only the required parameters, another with a single optional parameter, a third with two optional parameters, and so on, culminating in a constructor with all the optional parameters.
		When you want to create an instance, you use the constructor with the shortest parameter list containing all the parameters you want to set. Typically this constructor invocation will require many parameters that you don’t want to set, but you’re forced to pass a value for them anyway. 

The telescoping constructor pattern works, but it is hard to write client code when there are many parameters, and harder still to read it. 
		The reader is left wondering what all those values mean and must carefully count parameters to find out.

		Long sequences of identically typed parameters can cause subtle bugs. If the client accidentally reverses two such parameters, the compiler won’t complain, but the program will misbehave at runtime (Item 40: Design method signatures carefully).

A second alternative when you are faced with many constructor parameters is the JavaBeans pattern, in which you call a parameterless constructor to create the object and then call setter methods to set each required parameter and each optional parameter of interest.
		It is easy, if a bit wordy, to create instances, and easy to read the resulting code.

The JavaBeans pattern has serious disadvantages of its own. 
		Because construction is split across multiple calls, a JavaBean may be in an inconsistent state partway through its construction. 
				The class does not have the option of enforcing consistency merely by checking the validity of the constructor parameters.

				Attempting to use an object when it’s in an inconsistent state may cause failures that are far removed from the code containing the bug, hence difficult to debug.

		The JavaBeans pattern precludes the possibility of making a class immutable (Item 15).




















































































