	                                                                   |
	                                                                   |
*******************************************************************
*							    *
*							    *
*							    *
toc: 
pg 111 - 
*******************************************************************************
*******           Chapter 2 - Item 15: Minimize mutability              *******
*******************************************************************************
An immutable class is simply a class whose instances cannot be modified. All of the information contained in each instance is provided when it is created and is fixed for the lifetime of the object.

Immutable classes are easier to design, implement, and use than mutable classes. They are less prone to error and are more secure.

To make a class immutable, follow these five rules:
		1. Don’t provide any methods that modify the object’s state (known as mutators).

		2. Ensure that the class can’t be extended.
				This prevents careless or malicious subclasses from compromising the immutable behavior of the class by behaving as if the object’s state has changed.

				Preventing subclassing is generally accomplished by making the class final, but there is an alternative that we’ll discuss later.

		3. Make all fields final.
				This clearly expresses your intent in a manner that is enforced by the system. 

				This is necessary to ensure correct behavior if a reference to a newly created instance is passed from one thread to another without synchronization, as spelled out in the memory model

		4. Make all fields private.
				This prevents clients from obtaining access to mutable objects referred to by fields and modifying these objects directly.

				

























































