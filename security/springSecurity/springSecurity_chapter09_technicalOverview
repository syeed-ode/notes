	                                                                   |
*************************************************************
*************************************************************
*							    *
*							    *
*							    *
pg 120 - 145
*************************************************************
*****           Chapter 9 - Technical Overview          *****
*************************************************************
9.2 Core Components
	Here are some of the Java types that you’ll find in the core module. 
		They represent the building blocks of the framework, it’s 
		important that you understand what they are.
	The core module no longer contains any code related to 
		web-application security, LDAP or namespace configuration.

9.2.1 'SecurityContextHolder', 'SecurityContext' and 'Authentication' Objects
	The most fundamental object is SecurityContextHolder. This is where 
		we store details of the present security context of the 
		application. 
	'SecurityContextHolder' includes details of the principal currently 
		using the application.
	The SecurityContextHolder uses a ThreadLocal to store these details. 
		This is the SecurityContextHolder.MODE_THREADLOCAL. 
				This means that the security context is 
					always available to methods in the 
					same thread of execution, even if 
					the security context is no explicitly 
					passed around as an argument to those 
					methods.
	If you want all threads in a Java Virtual Machine to use the same 
		security context by using the SecurityContextHolder.MODE_GLOBAL 
		strategy.
	SecurityContextHolder.MODE_INHERITABLETHREADLOCAL assues threads 
		spawned by the secure thread also assume the same security 
		identity.
	The most fundamental object is 'SecurityContextHolder'.  This is 
		where the details of the present security context of the 
		application is stored.

Obtaining information about the current user
	Inside the SecurityContextHolder we store details of the principal 
		currently interacting with the application.
	Spring Security uses an 'Authentication' object to represent this 
		information. It is fairly common for users to query the 
		Authentication object.
			Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

			if (principal instanceof UserDetails) {
				String username = ((UserDetails)principal).getUsername();
			} else {
				String username = principal.toString();
			}

	The object returned by the call to getContext() is an instance of 
		the 'SecurityContext' interface. This is the object that is 
		kept in thread-local storage.
	Most authentication mechanisms within Spring Security return an 
		instance of UserDetails as the principal.
9.2.2 The UserDetailsService
	Another note from the above code fragment is that you can obtain a 
		principal from the 'Authentication' object.
	'UserDetails' is a core interface in Spring Security. The principal 
		is just an Object that can be cast into a 'UserDetails' object.
	Think of 'UserDetails' as the adapter between your own user database 
		and what Spring Security needs inside the 
		'SecurityContextHolder'.
	Since it represents somethng from your own database, quite often you
		will cast the 'UserDetails' to the original object that your 
		application provided, so you can call business-specific 
		methods (like getEmail(), getEmployeeNumber() and so on).
	The 'UserDetailsService' determines when and how one provides a 
		UserDetails object. The only has one method:
			UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;

	This is the most common approach to loading information for a user 
		within Spring Security. 
	You will see it used throughout the framework whenever information 
		on a user is required.
	On successful authentication, 'UserDetails' is used to build the 
		'Authentication' object that is stored in the 
		'SecurityContextHolder'.
			The good news is that we provide a number of 
				UserDetailsService implementations.
					This includes one that uses an 
						in-memory map (InMemoryDaoImpl) 
						and another that uses JDBC 
						(JdbcDaoImpl).
			Most users tend to write their own, though, with 
				their implementations. 
			Typlical their implementation sit on top of an 
				existing Data Access Object (DAO) that 
				represents their employees, customers, or 
				other users of the application.
	Remember the advantage that whatever your 'UserDetailsService' 
		returns can always be obtained from the 
		'SecurityContextHolder' using the above code fragment.
			The 'UserDetailsService' *does not* authenticate 
				the user. This is done by the 
				'AuthenticationManager'.
			If you need to authenticate a user it makes more 
				sense to implement AuthenticationProvider, 
				to define a custom authentication process.

9.2.3 GrantedAuthority
	'Authentication' provides another important method besides the 
		principal, 'getAuthorities()'. This method provides an array 
		of GrantedAuthority objects.
	A 'GrantedAuthority' is an authority that is granted to the 
		principal. Such authorities are usually "roles", such as 
		ROLE_ADMINISTRATOR or ROLE_HR_SUPERVISOR.
			These roles are later on configured for web 
				authorization, method authorization and 
				domain object authorization.
			Other parts of Spring Security are capable of 
				interpreting these authorities, and expect 
				them to be present.
	'GrantedAuthority' objects are usually loaded by the 
		'UserDetailsService'.
	Usually the 'GrantedAuthority' objects are application-wide 
		permissions. They are not specific to a given domain object.
			Of course, Spring Security is expressly designed to 
				handle this common requirement, but you’d 
				instead use the project’s domain object 
				security capabilities for this purpose.

9.2.4 Summary
	Just to recap, the major building blocks of Spring Security that 
		we’ve seen so far are:
	SecurityContextHolder, to provide access to the 
		SecurityContext.
	SecurityContext, to hold the Authentication and possibly 
		request-specific security information.
	Authentication, to represent the principal in a Spring 
		Security-specific manner.
	GrantedAuthority, to reflect the application-wide permissions 
		granted to a principal.
	UserDetails, to provide the necessary information to build an 
		Authentication object from your application’s DAOs or other 
		source of security data.
	UserDetailsService, to create a UserDetails when passed in a
		String-based username (or certificate ID or the like).
	Now that you’ve gained an understanding of these repeatedly-used 
		components, let’s take a closer look at the process of 
		authentication.

9.3 Authentication
	Spring Security can participate in many different authentication 
		environments. We recommend people use Spring Security for 
		authentication.
	                                                                   |
	However integrating with existing Container Managed Authentication is nevertheless supported.

	Spring Security also supports integrating with your own proprietary authentication system.

9.3.1 What is authentication in Spring Security?
	Let’s consider a standard authentication scenario that everyone is familiar with.
			1. A user is prompted to log in with a username and password.
			2. The system (successfully) verifies that the password is correct for the username.
			3. The context information for that user is obtained (their list of roles and so on).
			4. A security context is established for the user
			5. The user proceeds, potentially to perform some operation which is potentially protected by an access control mechanism which checks the required permissions for the operation against the current security context information.

	The first three items constitute the authentication process so we’ll take a look at how these take place within Spring Security.
			1. The username and password are obtained and combined into an instance of UsernamePasswordAuthenticationToken (an instance of the Authentication interface, which we saw earlier).
			2. The token is passed to an instance of AuthenticationManager for validation.
			3. The AuthenticationManager returns a fully populated Authentication instance on successful authentication.
			4. The security context is established by calling SecurityContextHolder.getContext().setAuthentication(…​), passing in the returned authentication object.

	From that point on, the user is considered to be authenticated. Let’s look at some code as an example.

	Note that this process will normally occur internally, in a web authentication filter for example. We’ve just shown what actually constitutes authentication in Spring Security has quite a simple answer.

-->	A user is authenticated when the SecurityContextHolder contains a fully populated Authentication object.

9.3.2 Setting the SecurityContextHolder Contents Directly
	In fact, Spring Security doesn’t mind how you put the Authentication object inside the SecurityContextHolder.

	The only critical requirement is that the 'SecurityContextHolder' contains a 'Authentication' (which represents a principal) before the 'AbstractSecurityInterceptor' needs to authorizae a user operation.

	In situations where a company has a proprietary authentication system it’s quite easy to get Spring Security to work, and still provide authorization capabilities. 
		All you need to do is write a filter (or equivalent) that reads the third-party user information. 

		Then build a Spring Security-specific Authentication object, and put it into the SecurityContextHolder.
				In this case you also need to pre-emptively create an HTTP session to cache the context between requests. See 9.4.4 Storing the SecurityContext between requests. 
						https://docs.spring.io/spring-security/site/docs/5.0.2.BUILD-SNAPSHOT/reference/htmlsingle/#tech-intro-sec-context-persistence

				If you’re wondering how the 'AuthenticationManager' is implemented in a real world example, we’ll look at that in the core services chapter.
						https://docs.spring.io/spring-security/site/docs/5.0.2.BUILD-SNAPSHOT/reference/htmlsingle/#core-services-authentication-manager

9.4 Authentication in a Web Application
	Now let’s explore the situation where you are using Spring Security in a web application (without web.xml security enabled).

	How is a user authenticated and the security context established? Consider a typical web application’s authentication process:
			1. You visit the home page, and click on a link.
			2. A request goes to the server, and the server decides that you’ve asked for a protected resource.
			3. 'AuthenticationEntryPoint': As you’re not presently authenticated, the server sends back a response indicating that you must authenticate. The response will either be an HTTP response code, or a redirect to a particular web page.
			4. Depending on the authentication mechanism, your browser will either redirect to the specific web page so that you can fill out the form, or the browser will somehow retrieve your identity (via a BASIC authentication dialogue box, a cookie, a X.509 certificate etc.).
			5. The browser will send back a response to the server. This will either be an HTTP POST containing the contents of the form that you filled out, or an HTTP header containing your authentication details.
			6. Next the server will decide whether or not the presented credentials are valid. If they’re valid, the next step will happen. If they’re invalid, usually your browser will be asked to try again (so you return to step two above).
			7. 'ExceptionTranslationFilter': The original request that you made to cause the authentication process will be retried. Hopefully you’ve authenticated with sufficient granted authorities to access the protected resource. If you have sufficient access, the request will be successful. Otherwise, you’ll receive back an HTTP error code 403, which means "forbidden".

	Spring Security has distinct classes responsible for most of the steps described above.

	The main participants (in the order that they are used) are the 'ExceptionTranslationFilter', an 'AuthenticationEntryPoint'.

	There is also an "authentication mechanism", which is responsible for calling the 'AuthenticationManager' which we saw in the previous section.

9.4.1 ExceptionTranslationFilter (step 7 from above)
	'ExceptionTranslationFilter' is a Spring Security filter that has responsibility for detecting any Spring Security exceptions that are thrown.
			Such exceptions will generally be thrown by an 'AbstractSecurityInterceptor', which is the main provider of authorization services.

			'AbstractSecurityInterceptor' produces Java exceptions and knows nothing about HTTP or how to go about authenticating a principal.

	'ExceptionTranslationFilter' knows about HTTP and how to go about authenticating a principal. 

	It returns error code 403 (if the principal has been authenticated and therefore simply lacks sufficient access - as per step seven above).

	It may also launch an 'AuthenticationEntryPoint' if the principal has not been authenticated and therefore we need to go commence step three.

9.4.2 AuthenticationEntryPoint (step 3 from above)
	The 'AuthenticationEntryPoint' is responsible for each web application's default authentication strategy 
			Well, this can be configured like nearly everything else in Spring Security, but let’s keep it simple for now.

	Each major authentication system will have its own 'AuthenticationEntryPoint' implementation, which typically performs one of the actions described in step 3.

9.4.3 Authentication Mechanism (step 6 from above)
	There needs to be something on the server that "collects" the authentication details submitted by the browser when one enters authentication credentials. 
			Usually these are submitted either as an HTTP form post or HTTP header.

	In Spring Security we have a special name for the function of collecting authentication details from a user agent (usually a web browser), referring to it as the "authentication mechanism".
			Examples are form-base login and Basic authentication.

	Once the authentication details have been collected from the user agent, an 'Authentication' "request" object is built and then presented to the 'AuthenticationManager'.

	After the authentication mechanism receives back the fully-populated Authentication object it performs the following steps:
			1. It will deem the request valid.
			2. Put the 'Authentication' into the 'SecurityContextHolder', and 
			3. Cause the original request to be retried (step 7 from above)

	If the 'AuthenticationManager' rejects the request, the the authentication mechanism will ask the user agent to retry (step 2 above).

9.4.4 Storing the SecurityContext between requests
	Depending on the type of application, there may need to be a strategy in place to store the security context between user operations.

	In a typical web application, a user logs in once and is subsequently identified by their session Id.
			The server caches the principal information for the duration session.

	In Spring Security, the responsibility for storing the SecurityContext between requests falls to the 'SecurityContextPersistenceFilter'. 

	The 'SecurityContextPersistenceFilter' stores the context as an 'HttpSession' attribute between HTTP requests.
			It restores the context to the 'SecurityContextHolder' for each request.

	It is crucial that 'SecurityContextPersistenceFilter' clears the 'SecurityContextHolder' when the request completes. 

	You shouldn’t interact directly with the 'HttpSession' for security purposes. Always use the 'SecurityContextHolder' instead.

	Many other types of application (for example, a stateless RESTful web service) do not use HTTP sessions and will re-authenticate on every request.

	It is still important that the 'SecurityContextPersistenceFilter' is included in the chain to make sure that the 'SecurityContextHolder' is cleared after each request.

	In an application which receives concurrent requests in a single session, the same 'SecurityContext' instance will be shared between threads.
			Even though a ThreadLocal is being used, it is the same instance that is retrieved from the HttpSession for each thread.

			This has implications if you wish to temporarily change the context under which a thread is running.
					If you just use SecurityContextHolder.getContext(), and call setAuthentication(anAuthentication) on the returned context object,

					Then the Authentication object will change in all concurrent threads which share the same SecurityContext instance.

					You can customize the behaviour of SecurityContextPersistenceFilter to create a completely new SecurityContext for each request.

					This will prevent changes in one thread from affecting another.

					Alternatively you can create a new instance just at the point where you temporarily change the context.

					The method 'SecurityContextHolder.createEmptyContext()' always returns a new context instance.

9.5 Access-Control (Authorization) in Spring Security
	The main interface responsible for making access-control decisions in Spring Security is the 'AccessDecisionManager'.

	It has a 'decide()' method which takes a few parameters:
		1. an 'Authentication' representing the principle requesting access
		2. a "secure object" (see below)
		3. a list of security metadata attributes which apply for the object (such as a list of roles which are required for access to be granted).

9.5.1 Security and AOP Advice
	If you’re familiar with AOP, you’d be aware there are different types of advice available: before, after, throws and around. 

	An around advice is very useful, because an advisor can elect whether or not to proceed with a method invocation, whether or not to modify the response, and whether or not to throw an exception.

	Spring Security achieves an around advice for method invocations using Spring’s standard AOP support and we achieve an around advice for web requests using a standard 'Filter'.

	Spring Security can help you protect method invocations as well as web requests. Most people are interested in securing method invocations on their services layer. 

	If you just need to secure method invocations in the services layer, Spring’s standard AOP will be adequate. If you need to secure domain objects directly, you will likely find that AspectJ is worth considering.

	You can elect to perform method authorization using AspectJ or Spring AOP, or you can elect to perform web request authorization using filters. You could use any of these together

9.5.2 Secure Objects and the AbstractSecurityInterceptor
	So what is a "secure object" anyway? Spring Security uses the term to refer to any object that can have security (such as an authorization decision) applied to it.

	The most common examples are method invocations and web requests.

	Each supported secure object type has its own interceptor class (method invocations: AspectJ or Spring AOP and web requests: a standard 'Filter'), which is a subclass of 'AbstractSecurityInterceptor'. The 'SecurityContextHolder' will contain a valid 'Authentication' if the principal has been authenticated.

	'AbstractSecurityInterceptor' provides a consistent workflow for handling secure object requests, typically:
		1. Look up the "configuration attributes" associated with the present request
		2. Submitting the secure object, current Authentication and configuration attributes to the 'AccessDecisionManager' for an authorization decision
		3. Optionally change the 'Authentication' under which the invocation takes place
		4. Allow the secure object invocation to proceed (assuming access was granted)
		5. Call the 'AfterInvocationManager' if configured, once the invocation has returned. 
		6. If the invocation raised an exception, the 'AfterInvocationManager' will not be invoked.

	What are Configuration Attributes?
		A "configuration attribute" can be thought of as a String that has special meaning to the classes used by 'AbstractSecurityInterceptor'. 
				They are represented by the interface 'ConfigAttribute' within the framework.

				They may be simple role names or have more complex meaning, depending on the how sophisticated the 'AccessDecisionManager' implementation is.

		The 'AbstractSecurityInterceptor' is configured with a 'SecurityMetadataSource' which it uses to look up the attributes for a secure object.
				Usually this configuration will be hidden from the user. 

				Configuration attributes will be entered as annotations on secured methods or as access attributes on secured URLs.

				For example, when we saw something like <intercept-url pattern='/secure/**' access='ROLE_A,ROLE_B'/> in the namespace introduction
						This is saying that the configuration attributes ROLE_A and ROLE_B apply to web requests matching the given pattern.

						In practice, with the default AccessDecisionManager configuration: 
								This means that anyone who has a GrantedAuthority matching either of these two attributes ('ROLE_A' or 'ROLE_B') will be allowed access.

								Strictly speaking though, they are just attributes and the interpretation is dependent on the 'AccessDecisionManager' implementation.

						The use of the prefix 'ROLE_' is a marker to indicate that these attributes are roles and should be consumed by Spring Security’s 'RoleVoter'.

						This is only relevant when a voter-based 'AccessDecisionManager' is in use.

						We’ll see how the 'AccessDecisionManager' is implemented in the authorization chapter. (See 25. Authorization Architecture)
								https://docs.spring.io/spring-security/site/docs/5.0.2.BUILD-SNAPSHOT/reference/htmlsingle/#authz-arch

	RunAsManager
		If an 'Aunthentication' needs to be changed. If a services layer method needs to call a remote system and present a different identity.

		Users may want to replace the 'Authentication' inside the 'SecurityContext' with a different 'Authentication'. 

		To do this the 'AccessDecisionManager' needs to call a 'RunAsManager'.

		Assuming 'AccessDecisionManager' decides to allow the request, the 'AbstractSecurityInterceptor' will normally just proceed with the request.

		Because Spring Security automatically propagates security identity from one server to another (assuming you’re using a properly-configured RMI or HttpInvoker remoting protocol client), this may be useful.

	AfterInvocationManager
		Following the secure object invocation proceeding and then returning - which may mean a method invocation completing or a filter chain proceeding - the 'AbstractSecurityInterceptor' gets one final chance to handle the invocation.

		At this stage the 'AbstractSecurityInterceptor' is interested in possibly modifying the return object. 
				We might want this to happen because an authorization decision couldn’t be made "on the way in" to a secure object invocation. 

				Being highly pluggable, 'AbstractSecurityInterceptor' will pass control to an 'AfterInvocationManager' to actually modify the object if needed.

				The 'AfterInvocationManager' class can even entirely replace the object, or throw an exception, or not change it in any way as it chooses.

				The after-invocation checks will only be executed if the invocation is successful. If an exception occurs, the additional checks will be skipped.

		Figure 9.1. Security interceptors and the "secure object" model		
				https://docs.spring.io/spring-security/site/docs/5.0.2.BUILD-SNAPSHOT/reference/htmlsingle/#abstract-security-interceptor

	Extending the Secure Object Model
		Only developers contemplating an entirely new way of intercepting and authorizing requests would need to use secure objects directly.

		For example, it would be possible to build a new secure object to secure calls to a messaging system.
				Anything that requires security and also provides a way of intercepting a call (like the AOP around advice semantics) is capable of being made into a secure object.

		Most Spring applications will simply use the three currently supported secure object types (AOP Alliance 'MethodInvocation', AspectJ JoinPoint and web request 'FilterInvocation') with complete transparency.

9.6 Localization
	Spring Security supports localization of exception messages that end users are likely to see. If your application is designed for English-speaking users, you don’t need to do anything as by default all Security messages are in English. If you need to support other locales, everything you need to know is contained in this section.

	https://docs.spring.io/spring-security/site/docs/5.0.2.BUILD-SNAPSHOT/reference/htmlsingle/#localization










		










































