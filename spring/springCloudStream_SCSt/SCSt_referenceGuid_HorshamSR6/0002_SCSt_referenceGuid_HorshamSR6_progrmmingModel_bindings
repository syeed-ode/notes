https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html#_programming_model
https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html
https://spring.io/projects/spring-cloud-stream#learn


Spring’s journey on Data Integration started with Spring Integration.

it provided a to build applications that can embrace Enterprise Integration Patterns
		to connect with external systems such as, databases, message brokers, and among others.

Spring Boot handled Spring’s programming model and the runtime responsibilities

Spring Cloud Stream put Spring Integration and Spring Boot together.


										Programming Model


To understand the programming model, you should be familiar with the following core concepts:

Destination Binders: 
		Components responsible to provide integration with the external messaging systems.

Bindings: 
		Bridge between the external messaging systems and application provided Producers and Consumers of messages (created by the Destination Binders).

Message: 
		The canonical data structure used by producers and consumers to communicate with Destination Binders 

		And thus other applications via external messaging systems.

Destination Binders
		Destination Binders are responsible for providing the configuration and integration with external messaging systems.

		This integration is responsible for
				routing of messages to and from producers and consumers

				data type conversion

				invocation of the user code

				connectivity and more

		Binders handle a lot of the boiler plate responsibilities however the binder still needs some help in the form of minimalistic set of instructions from the user
				which typically come in the form of binding configuration.

				Binding as a concept, does require special attention. The next section discusses it in detail

Bindings
		Bindings provide a bridge between the external messaging system (e.g., queue, topic etc.) and application-provided Producers and Consumers.

		The following example shows a fully configured and functioning Spring Cloud Stream application 
				it receives the payload of the message as a String type 
						(see Content Type Negotiation section), 

						https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html#content-type-management

				logs it to the console and 

				sends it down stream after converting it to upper case.
								@SpringBootApplication
								public class SampleApplication {

									public static void main(String[] args) {
										SpringApplication.run(SampleApplication.class, args);
									}

									@Bean
									public Function<String, String> uppercase() {
									    return value -> {
									        System.out.println("Received: " + value);
									        return value.toUpperCase()
									    };
									}
								}

		Unlike previous versions of spring-cloud-stream which relied on @EnableBinding and @StreamListener annotations
				It defines a single bean of type Function and that it is

		So, how does it became spring-cloud-stream application?

		It becomes spring-cloud-stream application simply based on 
				the presence of spring-cloud-stream and binder dependencies and 

				auto-configuration classes on the classpath effectively 

				setting the context for your boot application as spring-cloud-stream application.

		And in this context beans of type are treated as defacto message handlers
						Supplier, 

						Function or 

						Consumer 

				triggering binding of to destinations exposed by the provided binder 

				following certain naming conventions and rules to avoid extra configuration.

Binding and Binding names
		Binding is an abstraction that represents a bridge between sources and targets exposed by the binder and user code

		This abstraction has a name being aware of such name(s) is necessary for cases where additional per-binding configuration is required.

		Throughout this manual you will see examples of configuration properties such as spring.cloud.stream.bindings.input.destination=myQueue. 
				The input segment in this property name is what we refer to as binding name 

				it could derive via several mechanisms.

				The following sub-sections will describe the naming conventions 

				And the configuration elements used by spring-cloud-stream to control binding names.

		Functional binding names
				The functional programming model defaults to a simple binding names convention thus greatly simplifying application configuration.
									@SpringBootApplication
									public class SampleApplication {

										@Bean
										public Function<String, String> uppercase() {
										    return value -> value.toUpperCase();
										}
									}

				In the preceding example we have an application with a single function which acts as message handler.

				As a Function it has an input and output. 

				The naming convention used to name input and output bindings is as follows:
						input - <functionName> + -in- + <index>

						output - <functionName> + -out- + <index>

				The in and out corresponds to the type of binding (such as input or output).

				The index is the index of the input or output binding.
						It is always 0 for typical single input/output function, so 

						it’s only relevant for Functions with multiple input and output arguments.

						https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html#_functions_with_multiple_input_and_output_arguments

				So if for example you would want to map the input of this function to a remote destination (e.g., topic, queue etc) called "my-topic" you would do so with the following property:
						--spring.cloud.stream.bindings.uppercase-in-0.destination=my-topic

				Note how uppercase-in-0 is used as a segment in property name. The same goes for uppercase-out-0

				Descriptive Binding Names 
						-- it is our recommendation to avoid using it all together
						
						Some times to improve readability you may want to give your binding a more descriptive name (such as 'account', 'orders` etc).
								Another way of looking at it is you can map an 'implicit binding' name to an 'explicit binding' name.

								And you can do it with spring.cloud.stream.function.bindings.<binding-name> property.
										This property also provides a migration path for existing applications that rely on custom interface-based bindings that require explicit names.

						In this example you mapped and effectively renamed 'uppercase-in-0' binding name to 'input'. 
								--spring.cloud.stream.function.bindings.uppercase-in-0=input`

						Now all configuration properties can refer to input binding name instead (e.g., --spring.cloud.stream.bindings.input.destination=my-topic).

								https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html#_functional_composition

				Annotation-based binding names (legacy)
						In previous versions of spring-cloud-stream 'binding' names and in fact implementations, derived from the @EnableBinding annotation 
								which typically would take one or more interface classes as parameters.

						The parameters are referred to as 'bindings', and they contain methods representing 'bindable components'.

						Spring Cloud Stream already provides binding interfaces for typical message exchange contracts, which include:
								Sink: 
										Identifies the contract for the message consumer by providing the destination from which the message is consumed.
														public interface Sink {
															String INPUT = "input";

															@Input(Sink.INPUT)
															SubscribableChannel input();
														}
								Source: 
										Identifies the contract for the message producer by providing the destination to which the produced message is sent.
														public interface Source {
															String OUTPUT = "output";

															@Output(Source.OUTPUT)
															MessageChannel output();
														}
								Processor: 
										Encapsulates both the sink and the source contracts by exposing two destinations that allow consumption and production of messages.
														public interface Processor extends Source, Sink {}

						The reason why @EnableBinding and binding interfaces are not required
								because they could be derived

								Processor = Function

								Source = Supplier

				Pollable Destination Binding
						While the previously described bindings support event-based message consumption, sometimes you need more control, such as rate of consumption.  Starting with version 2.0, you can now bind a pollable consumer:

						The following example shows how to bind a pollable consumer in this case, an implementation of PollableMessageSource is bound to the orders “channel”. See Using Polled Consumers for more details.
										public interface PolledBarista {

										    @Input
										    PollableMessageSource orders();
											. . .
										}
						https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/current/reference/html/spring-cloud-stream.html#spring-cloud-streams-overview-using-polled-consumers

Producing and Consuming Messages
		You can write a Spring Cloud Stream application by simply writing functions and exposing them as `@Bean`s. 

		You can also use Spring Integration annotations based configuration or 

		Spring Cloud Stream annotation based configuration, 
				although starting with spring-cloud-stream 3.x we recommend using functional implementations.

		Spring Cloud Function support
				Overview
								Since Spring Cloud Stream v2.1, another alternative for defining stream handlers and sources is to use build-in support for 

								Spring Cloud Function where 
										https://cloud.spring.io/spring-cloud-function/reference/html/

								they can be expressed as beans of type java.util.function.[Supplier/Function/Consumer].

						To specify which functional bean to bind to the external destination(s) exposed by the bindings, 

						You must provide <><>spring.cloud.function.definition<><> property.
								Here is the example of the application exposing message handler as java.util.function.Function 

								Effectively supporting pass-thru semantics by acting as consumer and producer of data.
												@SpringBootApplication
												public class MyFunctionBootApp {

													public static void main(String[] args) {
														SpringApplication.run(MyFunctionBootApp.class);
													}

													@Bean
													public Function<String, String> toUpperCase() {
														return s -> s.toUpperCase();
													}
												}

								In the above you we simply define a bean of type java.util.function.Function called toUpperCase and 

								We identify it as a bean to be used as message handler 
										whose 'input' and 'output' must be bound 

										to the external destinations exposed by the provided destination binder.

						Here is the example of a source semantics exposed as java.util.function.Supplier
										@SpringBootApplication
										public static class SourceFromSupplier {

											@Bean
											public Supplier<Date> date() {
												return () -> new Date(12345L);
											}
										}

						Here is the example of a sink semantics exposed as java.util.function.Consumer
										@SpringBootApplication
										public static class SinkFromConsumer {

											@Bean
											public Consumer<String> sink() {
												return System.out::println;
											}
										}

						We are using <><>--spring.cloud.function.definition<><> property to 
								explicitly declare which function bean we want to be bound to binding destinations. 

								For cases when you only have single such bean it is not required but for 

						All other cases <><>--spring.cloud.function.definition<><> is required.

			Suppliers (Sources)
					

































